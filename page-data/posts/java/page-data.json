{
    "componentChunkName": "component---src-templates-category-template-js",
    "path": "/posts/java",
    "result": {"pageContext":{"currentCategory":"java","categories":["All","Web","database","featured","JS","java","TIL","회고","알고리즘","블로그"],"edges":[{"node":{"id":"9d9ef173-fb73-50ac-9e22-9abfd469267b","excerpt":"자바에서 네트워크 파트를 학습하고 정리한 내용입니다. 클라이언트 소켓 생성 소켓 객체 생성시 인자값 필요 (서버의 IP, 서버에서 열어준 프로세스의 포트번호) 본인의 IP주소는 localhost로 적어줄 수 있다. 서버용 소켓을 생성 ServerSocket : client 수만큼 socket을 생성해주는 공장 accept 메서드를 통해 클라이언트의 요청을 수락할 ‘소켓 생성’ 대기하다가 클라이언트가 ‘실제로 접속해서 감지’됐을 때 소켓 생성 채팅 프로그램 구현하기 우선 프로그램이 돌아가는 과정을 정리해보자. 서버를 가동시키고 - 클라이언트가 접속 클라이언트에 환영인사 전송 클라이언트가 닉네임 입력하고 전송 서버에서 “~님 접속하였습니다” 메세지 전송 클라이언트가 먼저 메세지 전송 서버에서 메세지를 받아 “~님 메세지 : 메세지 내용” 내용 출력 서버가 클라이언트에게 메세지 전송 클라이언트가 메세지를 받아 “서버 메세지 : 메세지 내용”을 출력 서버쪽 코드 클라이언트 쪽 코드 로그인…","fields":{"slug":"/java/011-network02/"},"frontmatter":{"categories":"java","title":"자바 네트워크 프로그래밍 02","date":"March 25, 2022"}},"next":{"fields":{"slug":"/java/011-network01/"}},"previous":{"fields":{"slug":"/JS/05-js-0222 copy/"}}},{"node":{"id":"68ae9049-9780-53a0-a983-6d599fb0a911","excerpt":"자바에서 네트워크 파트를 학습하고 정리한 내용입니다. 클라이언트 소켓 생성 소켓 객체 생성시 인자값 필요 (서버의 IP, 서버에서 열어준 프로세스의 포트번호) 본인의 IP주소는 localhost로 적어줄 수 있다. 서버용 소켓을 생성 ServerSocket : client 수만큼 socket을 생성해주는 공장 accept 메서드를 통해 클라이언트의 요청을 수락할 ‘소켓 생성’ 대기하다가 클라이언트가 ‘실제로 접속해서 감지’됐을 때 소켓 생성 채팅 프로그램 구현하기 우선 프로그램이 돌아가는 과정을 정리해보자. 서버를 가동시키고 - 클라이언트가 접속 클라이언트에 환영인사 전송 클라이언트가 닉네임 입력하고 전송 서버에서 “~님 접속하였습니다” 메세지 전송 클라이언트가 먼저 메세지 전송 서버에서 메세지를 받아 “~님 메세지 : 메세지 내용” 내용 출력 서버가 클라이언트에게 메세지 전송 클라이언트가 메세지를 받아 “서버 메세지 : 메세지 내용”을 출력 서버쪽 코드 클라이언트 쪽 코드","fields":{"slug":"/java/011-network01/"},"frontmatter":{"categories":"java","title":"자바 네트워크 프로그래밍 01","date":"March 24, 2022"}},"next":{"fields":{"slug":"/java/04-academy-fileio01/"}},"previous":{"fields":{"slug":"/java/011-network02/"}}},{"node":{"id":"f613f015-a867-5dc1-914b-a77467732764","excerpt":"자바의 입출력과 관련된 부분을 학습하고 정리한 포스트입니다. 파일 입출력 파일을 객체로(인스턴스화) 만들어 사용 파일 생성자의 인자값 : HDD에서 해당 파일의 경로값, + 파일명 + 확장자 파일을 다룰 때 주의할 점 : 파일의 확장자까지 이름에 속한다. 스트림(Stream) 스트림 : 입력장치와 출력장치 사이에 데이터가 흐르는 통로 입력한 데이터는 입력 스트림을 통해 컴퓨터로 전달되고 출력스트림을 통해 출력장치로 전달된다. 파일은 입력 스트림을 통해 데이터로 프로그램으로 전달된다. 프로그램은 출력 스트림을 통해 데이터를 내보낸다.  try ~ catch 구문 try ~ with resource : try문이 끝나면 객체를 자동으로 반납할 수 있게 처리 try ~ catch ~ finally : finally문은 catch문에서 잡지 못한 나머지 예외를 잡기 위한 공간  입출력 관련 메서드 File클래스에 정의되어 있는 메서드들 파일 생성 (createNewFile), 디렉터리 생…","fields":{"slug":"/java/04-academy-fileio01/"},"frontmatter":{"categories":"java","title":"자바 입출력 정리","date":"March 22, 2022"}},"next":{"fields":{"slug":"/java/06-academy-collection/"}},"previous":{"fields":{"slug":"/java/011-network01/"}}},{"node":{"id":"a9c2fcc2-c348-5858-a212-258f5cbd72bb","excerpt":"자바 컬렉션 프레임워크 컬렉션(Collection) : 여러가지 종류의 객체를 모아놓은 것 프레임워크(Framework) : 표준화, 정형화 된 체계적인 프로그래밍 방식 Collection Framework : 다수의 데이터를 효과적으로 처리하기 위해서 표준화된 방법을 제공하는 클래스 들의 집합 JDK 1.2부터 제공 컬렉션 프레임워크의 주요 인터페이스 List / Map / Set List : 순서가 있는 데이터의 집합. 중복허용 Set : 순서를 유지하지 않는 데이터의 집합. 중복허용x Map : key-value 쌍으로 이루어진 데이터의 집합. 순서는 유지되지 않음. 키는 중복x 값은 중복o 컬렉션 인터페이스의 메서드 Collection 인터페이스 추가 : boolean add(Object o), boolean addAll(Collection c) void clear() 검색 : boolean contains(Object o), boolean containsAll(Collec…","fields":{"slug":"/java/06-academy-collection/"},"frontmatter":{"categories":"java","title":"자바 Collection Framework","date":"March 22, 2022"}},"next":{"fields":{"slug":"/java/07-java-exception/"}},"previous":{"fields":{"slug":"/java/04-academy-fileio01/"}}},{"node":{"id":"90dd96a8-603c-5bb9-8c11-9268fa14aeb4","excerpt":"자바 예외처리ㅋ 8.1 프로그램 에러 종류 컴파일 에러: 컴파일 중에 발생하는 에러 런타임 에러: 프로그램 실행 도중에 발생하는 에러 논리적 에러: 실행은 잘되나 의도한 것과 다르게 작동할 때 자바의 런타임 에러 error : 프로그램 코드에 의해 수습될 수 없는 심각한 오류 exception : 코드에 의해 수습될 수 있는 미약한 오류 에러는 발생하면 프로그램의 비정상적 종료를 막을 수 없지만 예외는 예외처리를 통해 종료를 막을 수 잇다. 에러 ex. OutOfMemoryError, StackOverflowError +) 컴파일러가 하는 일 구문체크, 번역, 최적화, 생략된 코드들을 추가 Exception 클래스의 계층구조 Exception IOException, ClassNotFoundException RuntimeException ArithmeticException ClassCastException NullPointerException IndexOutOfBoundsExcept…","fields":{"slug":"/java/07-java-exception/"},"frontmatter":{"categories":"java","title":"자바 예외처리","date":"March 22, 2022"}},"next":{"fields":{"slug":"/java/07-java-generics/"}},"previous":{"fields":{"slug":"/java/06-academy-collection/"}}},{"node":{"id":"b9898bb6-b7f0-571a-8778-8bcd32eb9298","excerpt":"제네릭 Generics 데이터 형식에 의존하지 않고, 하나의 값이 여러가지 다른 데이터 타입을 가질 수 있도록 하는 방법. 예를 들어, 우리가 어떤 자료구조를 만들어 배포하고 싶다고 하자, 그런데 지원하고 싶은 데이터가 String, Integer등 여러 가지 타입을 지원하고 싶을 때 제너릭을 사용한다. 정확하게는 컴파일 시 타입을 체크해주는 기능이다. (JDK 1.5) 사용자의 필요에 의해 타입을 지정 제네릭의 장점 잘못된 타입이 들어올 수 있는 것을 컴파일 레벨에서 방지할 수 있다. 타입 안정성 제공 : 클래스 외부에서 타입을 지정하므로 따로 타입을 체크하고 형변환할 필요가 없다. 비슷한 기능을 지원하는 경우 코드의 재사용성이 높아진다. ClassCastException(형변환에러)를 줄이고 코드를 간결하게 함 타입을 미리 추론해 런타임에서 발생하는 에러를 컴파일에러로 해결할 수 있도록 해준다. 위의 경우에 ArrayList에서 제너릭을 사용해 Object형 데이터만 다루도록 …","fields":{"slug":"/java/07-java-generics/"},"frontmatter":{"categories":"java","title":"자바 지네릭스 (Generics)","date":"March 22, 2022"}},"next":{"fields":{"slug":"/java/05-academy-oop05/"}},"previous":{"fields":{"slug":"/java/07-java-exception/"}}},{"node":{"id":"b69797ec-40af-5744-99c5-045a5f7a942e","excerpt":"자바 객체지향 프로그래밍과 관련된 부분을 학습하고 정리한 포스트입니다. 다형성 상속","fields":{"slug":"/java/05-academy-oop05/"},"frontmatter":{"categories":"java","title":"자바 객체지향 프로그래밍 정리 - 추상메서드, 인터페이스","date":"March 21, 2022"}},"next":{"fields":{"slug":"/java/05-java-enum/"}},"previous":{"fields":{"slug":"/java/07-java-generics/"}}},{"node":{"id":"8e9ed511-37e1-5ab6-8ef1-1d899d586a75","excerpt":"열거형(Enums) 자바에서는 타입에 안전한 열거형 (typesafe enum) 열거형에서는 상수간의 비교여서 ==를 사용할 수 있다. 비교연산자 <,> 는 사용할 수 없지만 compareTo()를 사용 compareTo() : 왼쪽이 크면 양수, 오른쪽이 크면 음수 열거형의 조상 - java.lang.Enum values() : 열거형의 모든 상수를 배열에 담아 반환 getDeclaringClass() : 열거형의 Class 객체를 반환 name() : 열거형 상수의 이름을 문자열로 반환 ordinal() : 열거형 상수가 정의된 순서를 반환 valueOf(Class enumType, String name) : 지정한 열거형에서 name과 일치하는 열거형 상수를 반환 열거형에 멤버 추가 열거형 상수를 정의할 때 값이 불규칙하면, 원하는 값을 괄호로 상수 이름 옆에 붙여준다. ordinal 대신 이 값을 사용. 열거형 상수를 모두 정의한 후에 인스턴스 변수와 생성자를 정의 열거형의…","fields":{"slug":"/java/05-java-enum/"},"frontmatter":{"categories":"java","title":"자바 열거형(Enums)","date":"March 21, 2022"}},"next":{"fields":{"slug":"/java/04-academy-oop04/"}},"previous":{"fields":{"slug":"/java/05-academy-oop05/"}}},{"node":{"id":"2e590c2b-63d5-5571-a5d9-6d56a1d499b6","excerpt":"자바 객체지향 프로그래밍과 관련된 부분을 학습하고 정리한 포스트입니다. 다형성 상속(inheritance) 기존의 클래스를 재활용해서 새로운 클래스를 작성하는 과정이다. 코드의 중복을 제거하고 코드의 재사용성을 높일 수 있다. 클래스 간의 포함관계 클래스 들 간에 상속하지 않고 재사용하는 방법도 있다. 클래스 들 간에 포함관계(Composition)를 맺어준다. 포함관계를 맺어주는 것은 한 클래스의 멤버변수로 다른 클래스의 참조변수를 선언하는 것을 뜻한다. 상속 vs 포함 상속관계 : ~은 이다 (isa) 포함관계 : ~은 을 가지고 있다. (hasa)","fields":{"slug":"/java/04-academy-oop04/"},"frontmatter":{"categories":"java","title":"자바 객체지향 프로그래밍 정리 - 다형성, 상속","date":"March 21, 2022"}},"next":{"fields":{"slug":"/TIL/05_TIL_0319/"}},"previous":{"fields":{"slug":"/java/05-java-enum/"}}},{"node":{"id":"d3adce31-eccd-548d-b659-64ec2eb8c6ba","excerpt":"자바 객체지향 프로그래밍과 관련된 부분을 학습하고 정리한 포스트입니다. 오버라이딩(overriding) 조상 클래스로부터 상속받은 메서드의 내용을 변경하는 것 조건 : 이름 / 매개변수 / 반환타입 이 같아야 한다. (선언부) 접근제어자와 예외는 제한된 조건에서 변경가능 조상클래스보다 넓거나 같게는 변경가능 (ex. protected -> public / protected ) 조상클래스보다 많은 예외를 등록할 수 없다. 인스턴스 메서드를 static 메서드 또는 반대로 변경할 수 없음 오버로딩 vs 오버라이딩 overloading : 기존에 없는 새로운 메서드를 정의 overriding : 상속받은 메서드의 내용을 변경 super 자손 클래스에서 조상클래스의 상속받은 멤버를 참조하기 위해 사용하는 변수 super() - 조상클래스의 생성자 조상클래스의 생성자를 자식클래스에서 호출할 때 사용 조상클래스의 생성자를 호출하면 자손클래스의 인스턴스에서 조상클래스의 멤버를 사용할 수 있다.…","fields":{"slug":"/java/03-academy-oop03/"},"frontmatter":{"categories":"java","title":"자바 객체지향 프로그래밍 정리 - 오버로딩","date":"March 15, 2022"}},"next":{"fields":{"slug":"/java/02-academy-oop02/"}},"previous":{"fields":{"slug":"/TIL/02_TIL_0316/"}}},{"node":{"id":"2b8a16e4-a145-5f20-9137-8a709eaf142e","excerpt":"자바 객체지향 프로그래밍과 관련된 부분을 학습하고 정리한 포스트입니다.  변수의 종류 지역변수 : 메서드 내에 선언되어 메서드 내에서만 사용가능한 변수 인스턴스변수 : 클래스 영역에서 선언되며, 인스턴스를 생성할 때 만들어진다. 인스턴스는 독립된 저장공간을 가지므로 서로 다른 값을 가질 수 있다. 클래스 변수 : 인스턴스를 생성하지 않아도 어디서나 사용할 수 있는 변수 [클래스이름.클래스변수] 와 같이 사용된다. ex. Variable.cv 클래스가 메모리에 로딩될때 생성되어 프로그램이 종료될 때까지 유지된다. 제어자를 public 붙이면 어디서나 접근할 수 있는 전역변수global variable의 성격을 가진다. 클래스변수와 인스턴스 변수 클래스변수 : 각 개체가 고유한 값을 가지고 있어야 할때. 인스턴스변수 : 각 개체가 특별한 값을 가지고 있어야 할때. 생성자 인스턴스가 생성될 때 호출되는 ‘인스턴스 초기화 메서드’. 인스턴스 초기화 작업에 주로 사용된다. 생성자의 조건 :…","fields":{"slug":"/java/02-academy-oop02/"},"frontmatter":{"categories":"java","title":"자바 객체지향 프로그래밍 정리 02 - 메서드, 생성자","date":"March 15, 2022"}},"next":{"fields":{"slug":"/TIL/01_TIL_0315/"}},"previous":{"fields":{"slug":"/java/03-academy-oop03/"}}},{"node":{"id":"9c09ee1f-6019-5b60-bd58-c52dd00d404f","excerpt":"자바 객체지향 프로그래밍과 관련된 부분을 학습하고 정리한 포스트입니다. 객체지향 언어의 특징 코드의 재사용성이 높다 - 기존의 코드를 재활용 (상속) 코드의 관리가 용이하다 - 포함관계, 오버라이딩 신뢰성 높은 프로그래밍이 가능하다. - 제어자, 메서드 활용하여 코드의 중복을 제거 객체의 구성요소 속성(property) : 멤버변수, 특성, 필드, 상태 기능(function) : 메서드, 함수, 행위 클래스와 인스턴스 클래스 : 객체를 정의 해놓은 설계도. 객체를 생성하기 위해 사용된다. 클래스를 만든다 -> 자료형을 만든다. 인스턴스(객체) : 어떤 클래스로부터 만들어진 객체를 인스턴스라고 한다. 인스턴스 : new 연산자를 통해 heap영역 안에 저장할 수 있는 공간. laptop.brand = “LG”; // .을 찍어서 주소값으로 따라가 heap영역으로 간다. 추상화와 캡슐화 추상화 : 캡슐화를 구현하는 방법 사용자가 접근하면 안되는 데이터들을 내부적으로 숨기거나 접근을 제…","fields":{"slug":"/java/01-academy-oop01/"},"frontmatter":{"categories":"java","title":"자바 객체지향 프로그래밍 정리 01","date":"March 11, 2022"}},"next":{"fields":{"slug":"/java-devcourse/09-academy-day10/"}},"previous":{"fields":{"slug":"/TIL/01_TIL_0315/"}}}]}},
    "staticQueryHashes": ["1073350324","1956554647","2938748437"]}