{
    "componentChunkName": "component---src-templates-category-template-js",
    "path": "/posts/JS",
    "result": {"pageContext":{"currentCategory":"JS","categories":["All","Web","database","featured","JS","java","TIL","회고","알고리즘","블로그"],"edges":[{"node":{"id":"d97eff24-e3cb-534d-9380-39e0dc146fbb","excerpt":"자바스크립트 deep dive 이벤트 이벤트 핸들러 : 이벤트가 발생되었을 때 브라우저에 호출을 위임한 함수 이벤트 핸들러 등록 브라우저는 이벤트 핸들러를 통해 지정한 함수를 호출","fields":{"slug":"/JS/010-js-0224/"},"frontmatter":{"categories":"JS","title":"자바스크립트 - 이벤트","date":"March 28, 2022"}},"next":{"fields":{"slug":"/JS/02-js-0302/"}},"previous":{"fields":{"slug":"/database/01-db0101/"}}},{"node":{"id":"3e05843f-4051-5ee8-a1cd-663d19e814b4","excerpt":"‘모던 자바스크립트 Deep Dive’를 읽고 중요한 내용만 정리 타입변환 명시적 타입변환 : 값의 타입을 개발자가 의도적으로 변환하는 것을 명시적 타입변환 (Type casting)이라고 한다. 암묵적 타입변환 : 개발자의 의도와는 관계 없이 표현식을 평가하는 도중에 JS엔진에 의해 암묵적으로 타입이 변환(Type coercion) 원시값은 변경불가능한 값이기 때문에 기존 원시값을 이용해 새로운 값을 생성하는 과정. 표현식을 제대로 평가하기 위해 변환된 값을 사용하고 버린다. 단축평가 논리연산자를 사용한 단축평가 논리곱 연산자의 경우 양쪽 변이 모두 true라고 판정되어야 true가 반환된다. 따라서 이 경우에는 좌항에서 우항으로 평가가 이루어지는데 즉, 두번째 피연산자가 이 식의 결과를 반영한다는 의미로 볼 수 있다. 따라서 이 식은 두번째 피연산자를 반환한다.\n논리합 연산자는 두개 중 하나만 true로 평가되어도 true를 반환한다. 이때 좌항과 우항중에 좌항에 있는 요소만 …","fields":{"slug":"/JS/02-js-0302/"},"frontmatter":{"categories":"JS","title":"자바스크립트 - 타입변환과 단축평가","date":"March 28, 2022"}},"next":{"fields":{"slug":"/JS/03-js-0304/"}},"previous":{"fields":{"slug":"/JS/010-js-0224/"}}},{"node":{"id":"a5dfd998-d3a0-547b-91cc-a15a8958a906","excerpt":"자바스크립트 deep dive JS의 객체 JS에서 원시값은 불변값이지만, 객체는 변경가능한 값이다. 프로퍼티들로 구성되며, 프로퍼티는 키와 값으로 구성된다. JS는 자바 같은 객체지향과 달리 프로토타입 기반으로 다양한 객체 생성 방법이 있음 객체 리터럴 Object 생성자 함수 생성자 함수 Objet.create() class (ES6) 객체 리터럴을 통해 생성 js에서 함수는 일급 객체로 값으로 취급할 수 있기 때문에 객체 프로퍼티 값으로 할당할 수 있다. 프로퍼티 접근 마침표를 통해 접근 대괄호를 통해 접근 프로퍼티 값 갱신, 삭제, 동적생성 객체 리터럴의 확장 기능 (ES6) 프로퍼티 축약 : 프로퍼티 값으로 변수를 사용하면 키:값이 동일한 이름이면 키를 생략할 수 있다. 계산된 프로퍼티 이름 : 표현식을 사용해 키를 동적으로 생성하는 경우. 표현식을 대괄호로 묶어준다. 메서드 축약표현 : 메서드를 정의할 대 키를 생략하고 함수이름만 설정해서 할당가능 원시값과 객체 비교 변…","fields":{"slug":"/JS/03-js-0304/"},"frontmatter":{"categories":"JS","title":"자바스크립트 - 객체 리터럴","date":"March 28, 2022"}},"next":{"fields":{"slug":"/JS/04-js-0304/"}},"previous":{"fields":{"slug":"/JS/02-js-0302/"}}},{"node":{"id":"7bea9159-4c19-5b91-8e4f-12c79fe29bd7","excerpt":"자바스크립트 deep dive JS에서 함수 함수 : JS에서 함수는 객체타입의 값이며, 함수 리터럴로 생성해 변수에 할당 해줄 수 있다. 정의 방법 : 함수가 정의되면 식별자가 암묵적으로 생성되고 함수 객체가 할당. JS에서 함수는 리터럴로 사용되어 변수에 할당하거나, 프로퍼티 값으로 사용하거나, 배열의 요소로 넣을 수 있다. 일급 객체 : 값의 성질을 갖는 객체 함수 생성시점 함수 호출 함수가 호출되면, 함수 몸체 내에서 매개변수가 생성되고 일반 변수와 마찬가지로 undefined로 초기화된다. 매개변수는 함수의 몸체 내부에서만 참조할 수 있다. 함수 내부가 scope. 이후 호출에서 대입한 인수가 할당된다. 블록 내의 연산이 실행된 후 결과를 반환한다. 함수가 할당된 변수로 값이 반환된다. 다음과 같이 함수 내부에 인수가 적절하게 전달되었는지 타입 체크를 해주는 로직을 넣을 수도 있다. 이는 js에서는 런타임 전에 타입체크가 어렵기 때문 매개변수 기본값 (ES6) 다양한 함수…","fields":{"slug":"/JS/04-js-0304/"},"frontmatter":{"categories":"JS","title":"자바스크립트 - 함수","date":"March 28, 2022"}},"next":{"fields":{"slug":"/JS/05-js-0222/"}},"previous":{"fields":{"slug":"/JS/03-js-0304/"}}},{"node":{"id":"bc5eb02e-819b-5031-ae5c-f868885570e1","excerpt":"‘모던 자바스크립트 Deep Dive’를 읽고 중요한 내용만 정리 배열(Array) 여러 개의 값을 순차적으로 나열한 자료구조. 자바와 달리 배열의 요소에 다양한 타입의 값을 넣을 수 있다. JS에서 배열은 객체로 취급된다. 배열은 배열 리터럴, Array 생성자 함수, Array.from 메서드로 생성할 수 있다. JS에서 배열과 객체의 차이 배열은 인덱스를 통해 값을 참조 / 객체는 프로퍼티 키 값을 통해 참조 배열은 값의 순서가 존재한다 / 객체는 값의 순서가 없다. 배열은 length property가 있다. / 객체는 길이를 나타내는 프로퍼티가 없다. JS에서 배열은 객체로 취급 일반적으로 배열은 동일한 크기의 메모리 공간이 빈틈없이 이어진 자료구조 (밀집 배열 dense array) JS에서는 요소가 동일한 메로리 공간 크기를 갖지 않으며 연속적이지 않다. (희소 배열 sparse array) JS에서 배열은 인덱스를 프로퍼티 키로 가지고 프로퍼티 값으로 각 배열 요소를…","fields":{"slug":"/JS/05-js-0222/"},"frontmatter":{"categories":"JS","title":"자바스크립트 - 배열","date":"March 28, 2022"}},"next":{"fields":{"slug":"/JS/05-js-0222 copy/"}},"previous":{"fields":{"slug":"/JS/04-js-0304/"}}},{"node":{"id":"8ba4d82a-5e47-5d36-8b61-970310f10f0d","excerpt":"자바스크립트 deep dive 스코프","fields":{"slug":"/JS/05-js-0222 copy/"},"frontmatter":{"categories":"JS","title":"자바스크립트 - 스코프","date":"March 28, 2022"}},"next":{"fields":{"slug":"/java/011-network02/"}},"previous":{"fields":{"slug":"/JS/05-js-0222/"}}},{"node":{"id":"cdf0c57b-fbaa-5b4d-9a0f-09ffb664db5c","excerpt":"‘모던 자바스크립트 Deep Dive’를 읽고 중요한 내용만 정리 블록문 (block statement) 코드 블록 JS에서는 단독으로 사용할 수도 있지만 일반적으로 제어문이나 함수를 정의할 때 같이 사용 조건문 (conditional) if-else JS에서 if조건식은 boolean 값으로 평가되어야 한다. boolean값이 아니면 JS엔진에 의해 타입변환 되어 판단. js에서도 블록문이 1줄이면 중괄호를 생략해서 사용할 수 있다. 삼항 연산자도 사용가능 if-else문은 값처럼 할당할 수 없기 때문에 삼항연산자를 사용해 변수에 할당 switch switch문의 특징은 만족하는 특정 case를 실행하고 탈출하지 않고 다음 case가 실행된다는 점이다 따라서 switch문은 break문과 같이 사용한다. 윤년 계산 알고리즘 (switch의 fall through를 이용) 반복문(Loop) for while do…while","fields":{"slug":"/JS/01-js-0228/"},"frontmatter":{"categories":"JS","title":"자바스크립트 제어문","date":"February 28, 2022"}},"next":{"fields":{"slug":"/java-devcourse/03-academy-day04/"}},"previous":{"fields":{"slug":"/algorithm/01-algorithm-0228/"}}}]}},
    "staticQueryHashes": ["1073350324","1956554647","2938748437"]}