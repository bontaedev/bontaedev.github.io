{
    "componentChunkName": "component---src-pages-index-js",
    "path": "/",
    "result": {"data":{"allMarkdownRemark":{"edges":[{"node":{"id":"78f34344-3814-5597-ad96-899e7773a9ff","excerpt":"API","frontmatter":{"categories":"Web","title":"API 사용법","date":"April 29, 2022"},"fields":{"slug":"/webdev/08-api/"}}},{"node":{"id":"905c1cd4-0131-5d36-9c87-59ebbcddaccf","excerpt":"1. 기본 틀 짜기 우선 전체적인 틀을 먼저 구성한다.\n헤더부분에는 홈페이지 로고, 타이틀, Reserved 영역, 그리고 Body영역,Footer 영역으로 크게 3부분으로 나눈다 이렇게 전체 영역을 wrapper라는 클래스로 지정해 감싸고 div를 통해 header, body, footer를 나눈다. 여기서는 레이아웃을 구성할 때 div 태그를 사용한다. div 태그는 안에 컨텐츠가 없으면 크기가 알아서 작아지는 특징이 있다. 그리고 body부분을 Conetens, loginBox, emailBox라는 3가지 요소로 나눈다. header를 div로 세분화해서 header-contents 클래스로 만듬. body의 contents와 user부분도 body-contents 클래스를 붙임. 2. 로그인 박스 만들기 HTML 구조 전체 틀을 loginBox로 구성하고 제목(titleBox), 아이디/비밀번호 input공간(inputBox), 버튼(btnBox), 비밀번호찾기 링크(lin…","frontmatter":{"categories":"Web","title":"CSS_레이아웃 배치 연습","date":"April 18, 2022"},"fields":{"slug":"/webdev/04-css03/"}}},{"node":{"id":"ae6fe1d1-b4e4-5a06-b144-0a7c81d3d2b6","excerpt":"드림코딩 유튜브를 보고 유용한 부분을 정리.. 이전에 레이아웃을 짜는 방법 position, float, table 복잡하고 시간이 많이 소요됨 아이템들의 정렬과 배치, 동일한 크기로 조절하거나 위치를 조정하는데 제약사항이 많았음 float 이미지와 텍스트를 배치할 때 사용하는 용도 Flexbox Container와 item의 개념과 사용하는 주요한 속성값 container display flex-direction, flex-wrap, flex-flow, - justify-content, align-items, align-content item order, flex-grow, flex-shrink, flex, align-self main axis, cross axis 중심축을 기준으로 위치를 배치한다. 100% vs 100vh 퍼센트는 부모요소를 기준으로 한다 vh는 viewport. 즉 브라우저로 보이는 화면을 퍼센트로 기준으로 한다. color tool : 사이트를 디자인할 때…","frontmatter":{"categories":"Web","title":"CSS_Flexbox","date":"April 18, 2022"},"fields":{"slug":"/webdev/04-css04/"}}},{"node":{"id":"7b0bba4d-61d9-5a30-96cc-d0f9cc94eb2b","excerpt":"bootstrap ordering : breakpoint에 따라서 레이아웃 배치를 바꿔줄 때\n요소들에 order를 주고 그 순서에 맞게 배치하는 것이 가능 만약 화면의 크기가 바뀌었을 때\n보여주고 싶지 않은 요소 & 보여주고 싶은 요소를 결정하고 싶다면\nd 속성값을 사용한다. (display) d-none : col을 안보이게 하고 싶을 때\nd-md-block : md사이즈 이상일 때 태그에 block 속성을 가지게 한다. /_\n상대적 단위\nem : 본인 요소의 폰트 사이즈를 1em 가짐, 본인 요소가 글꼴 크기가 없으면\n부모요소를 기준으로 사이즈를 잡음\nrem : 루트요소(HTML)의 폰트사이즈를 기준으로 계산한 것이 1rem 계산\n_/","frontmatter":{"categories":"Web","title":"CSS_Flexbox","date":"April 18, 2022"},"fields":{"slug":"/webdev/07-bootstrap/"}}},{"node":{"id":"d2a4bf4b-b324-505b-9619-9d8f640631b7","excerpt":"CSS 선택자 (CSS Selector) 1. 기본 선택자 전체 선택자  : 모든 html요소를 선택한다. 태그 선택자  : 특정 태그를 선택 id 선택자  : 태그에 고유한 id값을 부여해서 선택 class 선택자  : 태그에 고유한 class값을 부여해서 선택 id랑 클래스는 쓰이는 용도가 다른데 하나의 요소에 고유한 값으로 지정해주고 싶으면 id 여러개의 요소를 그룹으로서 관리하고 싶으면 class를 지정해서 선택한다. 2. 기본 속성 선택자 태그 선택자와 함께 사용하며,  속성 표시 3. 문자열 속성 선택자 속성값에서 특정한 값이 아니라 조건에 만족하는 값을 탐색해서 선택  : 속성값이 특정한 값을 문자열로 포함하는 경우 선택 (띄어쓰기 기준)  : 속성값이 특정한 값을 문자열로 포함하는 경우 선택 (- 기준)  : 속성값이 특정한 값으로 시작하는 태그를 선택하는 경우  : 속성값이 특정한 값으로 끝나는 태그를 선택  : 속성값이 특정한 값을 포함하는 태그를 선택  부정 선…","frontmatter":{"categories":"Web","title":"CSS 정리 02 - CSS 선택자","date":"April 17, 2022"},"fields":{"slug":"/webdev/03-css02/"}}},{"node":{"id":"4d88afd5-7b8e-54e0-b56b-cbc79d07315c","excerpt":"CSS(Cascading Style Sheet) 웹페이지를 이루는 html 요소들의 스타일을 꾸며줄 수 있는 기능 html 요소들이 사용자들에게 어떤 식으로 보일지를 결정해주는 기능 CSS 설정 방식 inline : html 요소의 태그 자체에 style 속성을 부여하는 방식 내부 스타일 시트 : 하나의 html 파일 안에서 style 태그를 통해 속성을 부여하는 방식 external : 외부의 독자적인 css style 시트를 생성해 스타일 속성값을 모아두고,\n그 파일을 import하여 사용 CSS 적용 우선순위 (중요도 / 명시도 / 선언순서) 중요도 속성값 뒤에다다 !important inline 방식으로 적용된 style (권장되지는 않음) #id 선택자 class, 가상 클래스 선택자 tag 요소 선택자(p, div, span) 명시도 : 해당 요소를 명확하게 표현하면 할수록 우선순위가 높아진다. 선언순서 : 하나의 요소에 대해서 여러 개의 스타일 속성을 부여 했을 때 가…","frontmatter":{"categories":"Web","title":"CSS 정리 01 - CSS에 대해서","date":"April 17, 2022"},"fields":{"slug":"/webdev/02-css01/"}}},{"node":{"id":"64f6e513-932a-5f62-bf5d-2756cb2b6e51","excerpt":"국비과정 교육 중에서 HTML 파트를 공부하고 정리한 내용 웹페이지, 웹서비스 웹페이지 : 하나의 페이지. 웹페이지가 여러가지가 모여서 만들어지는 모음을 웹사이트라고 한다. HTML이란? HTML (Hyper Text Markup Language) : 웹페이지를 구성하는 언어 Markup Language : 구조화된 언어 - 각각의 요소들을 태그로 구조화시킨 언어 A라는 태그를 보면 이런 의미를 가지고 있구나고 해석할 수 있다. HTTP HTTP (HyperText Transfer\nProtocol) : 웹에서 이뤄지는 모든 데이터교환(클라이언트-서버)은 통신규약을 통해 이루어짐. HTML 태그  : 하이퍼링크 요소 구성 target 속성으로 새로운 탭으로 이동할지, 새로운 브라우저를 열어 이동할지, 현재 창에서 이동할 지 속성 부여 가능 self, blanl blank : 새로운 탭에서 열기  : 사용자의 입력값을 받기위해 사용하는 요소 placeholder : 어떤 값을 입력할 …","frontmatter":{"categories":"Web","title":"HTML_태그 정리","date":"April 15, 2022"},"fields":{"slug":"/webdev/01-webdev-html01/"}}},{"node":{"id":"18682f71-6c55-5bcb-8b3a-40cff29df309","excerpt":"DBCP DB의 접속량에는 한계가 있다. 무한정으로 객체를 생성하면 서버에 과부하. Database Connection Pool : 한정된 Connection만 만들 수 있게 제한 DB Connection Pool(DBCP) : 커넥션 객체가 담길 수 있는 공간 Connection Pool을 이용해서 지정된 개수만큼 Connection 객체를 생성해놓고 선착순으로 접속한 클라이언트에 가지고 있는 Connection을 분배하고 그 뒤로 들어오는 클라이언트들은 앞의 클라이언트들이 Connection을 반납할 때까지 대기 여기서는 Apache Common DBCP를 사용 DBCP 라이브러리 다운로드, 적용 BasicDataSource 클래스 인스턴스 생성 : DBCP를 만들어주는 클래스 DBCP를 구성하기 위해 필요한 설정값 Singleton 패턴 적용 위의 BasicDataSource를 통해 커넥션 풀을 반환하는 과정을 싱글톤 패턴을 적용하여 여러개의 데이터 풀이 생성되는 것을 방지할…","frontmatter":{"categories":"database","title":"JDBC 3일차 - DBCP","date":"April 13, 2022"},"fields":{"slug":"/database/19-jdbc-03/"}}},{"node":{"id":"9b27aeb4-43f4-53ae-a102-f265fc9f3595","excerpt":"SQL Injection 데이터를 삽입할 때 값이 아니라 쿼리문을 삽입해서 예상치 않는 결과를 발생시킴 개인 정보 유출에 악용됨. 이것 때문에 Statement 말고 PreparedStatement사용 PreparedStatement PreparedStatement : 객체를 생성할 때 인자값으로 넘겨주는 SQL문을 미리 DBMS에 컴파일하여 올려 둠. 물음표를 사용해 추후에 인자값을 세팅해줄 자리를 표시한다. 추후에 ?자리에 세팅되는 값은 말그대로 값 그 자체로 들어가게 된다. (문자열로 인식) ‘1 = 1’ 이러한 식을 넣어도 값으로만 인식하기 때문에 SQL Inject에 대한 방지처리가 됨. Staetement 객체보다 PreparedStatement 객체를 활용했을 때 가독성도 높아짐. Oracle Date(sql.date) - Java Date의 차이 SimpleDateFormat : oracle date 타입의 데이터를 Java의 String으로 변환 생성자의 인자값을 …","frontmatter":{"categories":"database","title":"JDBC 2일차 - PreparedStatement","date":"April 12, 2022"},"fields":{"slug":"/database/18-jdbc-02/"}}},{"node":{"id":"bae6fe8f-6518-5c89-8cf7-9bf685ae0899","excerpt":"JDBC  : 자바에서 데이터베이스와 연결해 데이터를 주고받을 수 있게 해주는 라이브러리 sql 명령문을 자바에서 수행하면 DB로 전달 DBMS의 종류에 따라서 JDBC의 종류도 달라진다. 여기서는 Oracle (OJDBC) 를 사용 JDBC 드라이버 다운로드와 세팅 JDBC로 자바프로그램과 DB 연동하기 기본적인 DB연결 셋팅 Connnection 객체 생성 DriverManager 클래스의 getConnection()을 통해 객체 생성 getConnection(url, username, password) 기본적인 CRUD 기능 구현해보기  객체 : 오라클에게 sql문을 전송해 쿼리의 결과를 요청할 수 있게 해주는 객체  : 행에 변화를 줄 때 사용하는 메서드. 쿼리문의 INSERT, UPDATE, DELETE와 사용 메서드의 반환값으로 나오는 정수는 인자값으로 넘겨준 쿼리문을 통해서 영향을 받은 행의 개수 INSERT 기능 (데이터 삽입) UPDATE 기능 (데이터 수정) DE…","frontmatter":{"categories":"database","title":"JDBC 1일차 - JDBC 개요","date":"April 11, 2022"},"fields":{"slug":"/database/17-jdbc-01/"}}},{"node":{"id":"a7d522b0-805f-553e-973f-cf90b6da4e0c","excerpt":"뷰 View 하나 이상의 테이블에서 원하는 데이터를 선택해서 새로운 가상테이블을 만들어 주는 것 뷰를 통해 만들어진 테이블이 물리적으로 존재하는 것은 아니고, 다른 테이블의 데이터만 조합해서 보여주는 것. 특정 계정이 원본 데이블에 접근해서 모든 데이터(불필요한 데이터)에 접근하는 걸 방지할 수 있음 뷰를 생성하는 권한 - 뷰의 내용을 수정하면 - 실제 원본 테이블의 데이터도 수정됨 원본 테이블의 내용이 수정되면 뷰의 내용도 수정된다. - 데이터 실시간 공유 (업데이트) 시퀀스(Sequence) 순차적으로 정수값을 자동을 생성하는 객체 (자동 번호 발생기) 옵션 start with 숫자 : 몇번부터 번호를 시작할건지 increment by 숫자 : 몇 단위로 숫자를 증가시킬건지 maxvalue 숫자 / nomaxvalue : 시퀀스의 최대값 지정 minvalue 숫자 / nominvalue : 시퀀스의 최소값 지정 / 지정x cycle / nocycle : 최대값에 도달하면 처음으…","frontmatter":{"categories":"database","title":"데이터베이스 6일차 정리 - 뷰(View), 시퀀스(Sequence)","date":"April 07, 2022"},"fields":{"slug":"/database/16-db-viewsequence/"}}},{"node":{"id":"78048755-17a2-5e30-921b-c1295096a3ec","excerpt":"트랜잭션이란? Transaction 한번에 수행되어야하는 작업 단위 하나의 작업을 완료하기 위해서 각각의 흐름의 정상적으로 완료됐을때만 작업단위를 정상적으로 수행되었다고 판단하고 완료하는 과정 트랜잭션 예시 ex) ATM 카드삽입 메뉴 선택(인출) 금액확인 / 비밀번호 인증 사용자가 입력한 금액이 뽑을 수 있는 금액인지 확인 실제 현금 나옴 카드 뽑고 끝","frontmatter":{"categories":"database","title":"데이터베이스 6일차 정리 - DB 트랜잭션","date":"April 06, 2022"},"fields":{"slug":"/database/15-db-transaction/"}}},{"node":{"id":"5ec05f77-61f4-56d5-841d-2f7b29775630","excerpt":"데이터 조작어 DML(Data Manipulation Language) Data를 삽입 수정 삭제 조회하는 언어 (CRUD) 1. INSERT 테이블에 새로은 행을 추가할 때 사용하는 구문 서브쿼리를 이용한 INSERT 구문 사용 자동형변환(묵시적형변환) : 오라클이 자동으로 자료형을 추측하여 변환해주는 것 2. UPDATE 컬럼에 저장된 데이터를 수정하는 구문. 테이블 전체 행 개수에 변화를 주지 않음 3. DELETE 테이블의 행을 삭제하는 구문. 행의 개수에 변화가 생김\n조건문을 걸어주지 않으면 테이블의 모든 데이터가 삭제됨 TRUNCATE : 테이블의 전체 행을 삭제할 때 사용하는 구문. 되돌릴 수 없음, 영구적으로 삭제","frontmatter":{"categories":"database","title":"데이터베이스 6일차 정리 - 데이터조작어(DML)","date":"April 06, 2022"},"fields":{"slug":"/database/14-db-dml/"}}},{"node":{"id":"0db1a697-4fc1-567e-932f-a662998062f8","excerpt":"GRANT / REVOKE 사용자 또는 role(resource, connect, dba)에 대한 권한 부여 system / 관리자 계정 접속 - 신규 사용자 생성 - grant 접속 권한 부여 - 리소스 권한 부여","frontmatter":{"categories":"database","title":"데이터베이스 6일차 정리 - 데이터제어어(DCL)","date":"April 06, 2022"},"fields":{"slug":"/database/13-db-dcl/"}}},{"node":{"id":"f2010d2d-5f05-5255-b289-c3fe42f3a257","excerpt":"Top N 분석 (Top N Query) 컬럼에서 가장 큰 n개의 값을 혹은 가장 작은 n개의 값을 요청할 때 사용 상위/하위 n개의 데이터 회사에서 가장 많이 팔린 제품 10개, 회사에서 봉급이 제일 많은 10개 게시판 페이징 / 조회수가 높은 인기글 ROWNUM 출력되는 Select 문의 행마다 자동적으로 순위를 매겨주는 것 default로 원래 존재하는 데이터의 순서대로 순위를 매겨준다. 우리가 원하는 기준에 맞춰 이미 정렬이 된 상태의 데이터에 대해 rownum -> 순서를 매겨야 함 인라인 뷰(Inline View) : 서브쿼리 안에서 월급이 제일 큰 순서대로 일단 데이터를 정렬 실제 메인쿼리에서 rownum을 사용하게 되면 이미 정렬된 데이터에 대해 순서가 매겨지게 된다. 인라인뷰를 계속 사용하면 쿼리문이 길어진다. 1.ROW_NUMBER() over 안쪽의 컬럼 순서에 따라 정렬한 다음 순위를 매긴다. 정렬 데이터에 중복값이 있다면 원래 순서대로 19,20 이런 식으로…","frontmatter":{"categories":"database","title":"데이터베이스 5일차 정리 - DB_TopN_분석(topNQuery)","date":"April 05, 2022"},"fields":{"slug":"/database/12-db-topNQuery/"}}},{"node":{"id":"ec3aaa98-827e-58f2-870e-109051d85043","excerpt":"DDL(Data Definition Language) 데이터 정의어 drop : 테이블을 삭제하기 위해 사용하는 구문 DROP TABLE temp; ALTER 테이블에 정의된 내용을 수정하고자 할 때 사용하는 데이터 정의어 컬럼 추가삭제, 제약조건 추가삭제, 컬럼의 자료형 변경, DEFAULT 값 변경 테이블명,컬럼명,제약조건의 이름 변경 제약조건(Constraints) 테이블을 생성할 때 구성하는 컬럼에 들어갈 데이터에 대해 제약조건을 설정하는 것 데이터의 일관성과 정확성을 유지하기 위해서 (데이터 무결성)\n  : 해당 컬럼에 null 값이 들어갈 수 없음.  : 중복된 값을 허용하지 않음  : (NOT NULL + Unique) 고유한 식별자로 사용하는 컬럼 : 두 테이블 간의 관계를 설정하고, b테이블의 member_id 컬럼에 들어갈 수 있는 값이 A테이블의 ID에 있는 데이터여야 하는 경우 예시 /게시글/댓글 의 관계  : 해당컬럼에 저장 가능한 값의 범위 조건을 지정해서…","frontmatter":{"categories":"database","title":"데이터베이스 5일차 정리 - DB_DDL(데이터정의어), 제약조건(Constraints)","date":"April 05, 2022"},"fields":{"slug":"/database/11-db-constraints/"}}},{"node":{"id":"0f597266-2d8d-5292-833b-23c3c4d35b48","excerpt":"서브쿼리 (Sub Query) 하나의 SQL문 안에 포함된 다른 SQL문 메인쿼리가 서브쿼리를 포함하는 종속적 관계 서브쿼리는 소괄호로 묶어줌 / 연산자의 오른쪽에 위치 / order by는 subquey안에서 사용불가 서브쿼리 종류 단일행, 다중행, 다중열, 다중행다중열, 상호연관, 스킬라 1. 단일행 서브쿼리 : 서브쿼리 조회결과 값이 1개 행 2. 다중행 서브쿼리 : 조회 결과가 여러개(여러행) 다중행 서브쿼리 앞에는 != 연산자 못씀 IN, NOT IN, ANY, ALL, EXISTS 등과 같이 쓰임 3. 다중열 서브쿼리 : 서브쿼리 조회결과 값이 여러개 열 일때","frontmatter":{"categories":"featured database","title":"데이터베이스 4일차 정리 - DB서브쿼리","date":"April 04, 2022"},"fields":{"slug":"/database/10-db-subquery/"}}},{"node":{"id":"f54cf4c9-3391-5b9e-bd15-726fa4619ccb","excerpt":"집합 연산자 Set Operator 두 개 이상의 테이블을 조인없이 연관된 데이터를 조회하는 방식 여러 개의 질의결과(ResultSet)을 연결해서 하나로 결합하는 방식 각 테이블에서 반환된 결과값을 하나의 테이블로 결합하는 방식 여러개의 sql문을 사용해서 하나의 테이블로 결과를 반환받아야 하는 경우 UNION 합집합. 중복된 데이터를 제거하고 첫번째 컬럼을 기준으로 오름차순하여 데이터를 보여줌. 각 테이블에서 조회하는 컬럼 수가 다르면 UNION 사용X 조회하려는 컬럼이 서로 상호호환 불가한 데이터타입이면 union 사용 X (데이터의 일관성 유지) UNION ALL 합집합. 중복된 데이터를 제거하고 정렬없이 데이터를 보여줌. 조회한 결과값의 첫번째 테이블 아래로 두번째 테이블 결과값을 이어붙임 INTERSECT 교집합. 두 테이블의 쿼리 결과중 공통된 결과값만 보여줌. MINUS 차집합. 두 테이블의 쿼리 결과중 공통된 요소를 뺀 하나의 테이블만 보여줌 예시문제 employe…","frontmatter":{"categories":"database","title":"데이터베이스 4일차 정리 - 집합연산자","date":"April 04, 2022"},"fields":{"slug":"/database/09-db-SetOps/"}}},{"node":{"id":"a771cb83-3e87-5a25-be95-7722058cc34a","excerpt":"JOIN 여러 개의 테이블을 결합. 조합하려고 하는 테이블에서 각 테이블의 공통된 컬럼을 데이터로 합쳐서 표현하는 것. 조건을 제시하지 않으면 이중 for문과 비슷한 형태로 동작. (모든 경우의 수를 조회) ANSI 표준 JOIN, Oracle JOIN 예시 : 부서코드가 같은 employee, Department 테이블의 사번, 사원명, 부서코드, 부서명 조회 oracle syntax ANSI syntax 예시 : 사번, 사원명, 직급코드 직급명 출력 두개의 테이블에서 컬럼명이 같을 때 각 테이블에 별칭을 붙임, 이름이 같은 컬럼명 앞에 테이블별칭.컬럼명 형식으로 두 테이블의 같의 컬럼명을 using을 사용 JOIN 종류 CROSS JOIN 조건이 없어 모든 경우의 수가 조합되어 나오는 경우 (A X B) INNER JOIN 테이블 A와 테이블 B에 조건이 맞는 데이터만 반환 (교집합), 가장 많이 사용  예시1 : 총무부, 회계관리부인 사원들의 사원명, 이메일, 부서명, 부서코…","frontmatter":{"categories":"database","title":"데이터베이스 3일차 정리 - DB_JOIN구문","date":"March 31, 2022"},"fields":{"slug":"/database/08-db-0302/"}}},{"node":{"id":"4753c4a8-a902-5dac-849b-e17aa953483d","excerpt":"그룹함수(Group Function) sum, avg, count, max/min SUM : 해당 컬럼/숫자 값의 총합을 구해주는 함수 AVG : 해당 컬럼 값들의 평균을 구해주는 함수 MAX/MIN : 해당 그룹에서 최대/최소값을 반환하는 함수 GROUP BY 그룹함수를 이용해 여러개의 결과값을 도출하고 싶을때 (그룹별 집계) 그룹함수는 단 한개의 결과값만을 도출. 그룹함수를 이용해 여러 개의 결과값을 도출하고 싶을 때? 그룹함수가 적용된 그룹을 기준으로 해서 group by절에 해당 컬럼을 사용 HAVING where 절에서는 그룹함수를 사용할 수 없다. HAVING : group by를 이용해 그룹함수로 값을 구해올 때 그 값에 대해 조건을 걸고 싶을 때 select … 그룹함수 FROM 테이블명 group by 컬럼… having 조건 from where group by having order by 예제 문제. 그룹함수 부서코드가 D5인 사람들의 급여의 총합 직원명, 직원들…","frontmatter":{"categories":"database","title":"데이터베이스 3일차 정리 - 그룹함수","date":"March 31, 2022"},"fields":{"slug":"/database/06-db0301/"}}},{"node":{"id":"fc6ddbde-5c52-56e4-a265-4b0289fc7a57","excerpt":"조건식(DECODE) decode(대상표현식, 조건1,결과1, 조건2, 결과2, default) default 값을 명시해주지 않으면 default = null 대상표현식/값이 조건1과 같다면 결과1을 반환, 정해준 조건이 안되면 default로 빠짐) 조건식 (CASE) case를 이용해 결과값을 적어줄 때 모든 조건에 대해 동일한 자료형 예제 문제 사번, 직원명과 퇴사여부를 출력. 퇴사여부를 보여주는 ENT_YN이 ‘Y’와 같다면 퇴사일을 출력 만약 퇴사하지 않았다면 재직중을 출력. 정렬순서는 퇴사여부, 사번 컬럼 오름차순. 부서별 1분기 실적 조회해보기 D2,D6 부서는 상 D9 부서는 하 나머지는 중 / 인턴은 해당없음 부서코드 없으면 인턴. 부서코드 중복 X. 정렬 순서는 부서코드 오름차순 ‘부서코드’ ‘1분기실적’ 이렇게 출력 조건식(DECODE) 조건식 (CASE) 예제 문제","frontmatter":{"categories":"database","title":"데이터베이스 2일차 정리 04 - 오라클 조건식","date":"March 30, 2022"},"fields":{"slug":"/database/06-db0205/"}}},{"node":{"id":"7d531931-7f9d-5959-85ce-20a2ed3c4bfb","excerpt":"DB의 형변환이란? 데이터 타입을 바꿔주는 작업 to_char(date/number, format) 날짜 혹은 숫자를 특정한 형식의 문자형으로 반환해주는 함수 예시 : 입사년월일 0000년00월00일 - 사원명, 입사년월일 한글을 형식에 넣고 싶다면 더블 따옴표 안에 넣어줌 예시 : employee 테이블 사원명, 입사일 -> 1990/02/05 (화) 형태로 조회  to_char(대상 숫자,포맷) 포맷 000 : 지정해준 형식보다 짧은 숫자가 들어오면 형식에 맞춰 결과를 반환 999 : 지정해준 형식보다 짧은 숫자가 들어오면 길이에 맞춰서 반환  to_char(숫자,‘L…‘) - 통화표시 예시 : employee 직원명, 직급코드, 연봉 조회 단 연봉은 579,656,555, 연봉 보너스가 적용된 금액으로 조회 ((월급*bonus)*12)  to_date(숫자/문자, 형식) 숫자형 또는 문자형 데이터를 Date 타입으로 바꿔줌 시간값을 변환할 때 앞에 년월일 정보를 주지 않으며 …","frontmatter":{"categories":"database","title":"데이터베이스 2일차 정리 03 - DB형변환","date":"March 30, 2022"},"fields":{"slug":"/database/05-db0203/"}}},{"node":{"id":"2edc4b70-7f3e-5109-9205-c6c5c9060d8d","excerpt":"오라클 데이터베이스를 학습하고 정리한 포스트입니다.. 숫자형 함수 abs : 인자로 전달받은 숫자의 절댓값을 반환하는 함수 mod : 인자로 전달받은 숫자를 나눌 값으로 나눠서 나머지를 반환하는 함수 round : 인자로 받은 숫자를 반올림하여 반환해주는 함수 floor(숫자) : 인자로 받은 숫자의 소숫점 자리를 모두 버리는 함수 TRUNCATE(숫자, 소수점 위치) : 인자로 받은 숫자를 지정한 위치까지 잘라서 반환해주는 함수 ceil(숫자) : 인자로 받은 소숫점 자리를 무조건 올리고 버리는 함수 날짜형 함수 sysdate : 시스템에 저장되어 있는 현재 날짜 반환 current_date : session(접속) 한 곳의 timezone을 변환해주는 변수 month_between() : 두 날짜형 인자를 받아 사이의 개월 수를 반환 add_months(기준 날짜, 더할 개월 수) : 첫 번째 인자값인 날짜를 기준으로 해서 두 번째 인자값을 더해서 반환해주는 함수. 마지막 날을…","frontmatter":{"categories":"database","title":"데이터베이스 2일차 정리 02 - 날짜형 함수","date":"March 30, 2022"},"fields":{"slug":"/database/04-db0202/"}}},{"node":{"id":"f9bc6138-3f2a-5926-a95e-1e9850e47ab1","excerpt":"오라클 데이터베이스를 학습하고 정리한 포스트입니다.. 숫자형 함수 abs : 인자로 전달받은 숫자의 절댓값을 반환하는 함수 mod : 인자로 전달받은 숫자를 나눌 값으로 나눠서 나머지를 반환하는 함수 round : 인자로 받은 숫자를 반올림하여 반환해주는 함수 floor(숫자) : 인자로 받은 숫자의 소숫점 자리를 모두 버리는 함수 TRUNCATE(숫자, 소수점 위치) : 인자로 받은 숫자를 지정한 위치까지 잘라서 반환해주는 함수 ceil(숫자) : 인자로 받은 소숫점 자리를 무조건 올리고 버리는 함수 날짜형 함수 sysdate : 시스템에 저장되어 있는 현재 날짜 반환 current_date : session(접속) 한 곳의 timezone을 변환해주는 변수 month_between() : 두 날짜형 인자를 받아 사이의 개월 수를 반환 add_months(기준 날짜, 더할 개월 수) : 첫 번째 인자값인 날짜를 기준으로 해서 두 번째 인자값을 더해서 반환해주는 함수. 마지막 날을…","frontmatter":{"categories":"database","title":"데이터베이스 2일차 정리 01 - 숫자형 함수","date":"March 30, 2022"},"fields":{"slug":"/database/03-db0201/"}}},{"node":{"id":"4fa436da-d8e5-5c44-b2bf-2a735236aabc","excerpt":"오라클 데이터베이스를 학습하고 정리한 포스트입니다.. 오라클 함수 단일 행 함수 : 각 행마다 반복적으로 구성해서 입력받은 행의 갯수만큼 결과를 반환하는 함수\nex) length : 데이터의 길이값 반환 그룹 함수 : 특정한 행들의 집합으로 그룹이 형성되어 그룹당 1개의 결과를 반환 단일 행 함수 문자형 함수 lengthb() : 주어진 컬럼/문자열에 대한 길이(byte)로 반환해주는 함수 instr : 특정 문자열에서 찾고자 하는 문자열을 찾는 함수. 문자열의 위치를 찾아준다. instr(컬럼/문자열, 찾고자 하는 문자열, 시작인덱스,검색한 문자열의 순번) dual 테이블 : 오라클에서 제공해주는 연산, 함수 실행 용도로 사용하는 특수한 테이블 lpad(), rpad() : 주어진 컬럼/문자열을 대상으로 해서 임의의 문자열을 왼쪽 오른쪽에 덧붙여서 길이 N의 문자열을 반환하는 함수 ltrim, rtrim(대상이 되는 컬럼/문자열, 제거하고 싶은 문자열) : 주어진 컬럼/문자열을 …","frontmatter":{"categories":"database","title":"데이터베이스 1일차 정리 02 - 단일행 함수","date":"March 29, 2022"},"fields":{"slug":"/database/02-db0102/"}}},{"node":{"id":"fae96840-466e-5a7b-86c0-b5ff95dd5230","excerpt":"오라클 데이터베이스를 학습하고 정리한 포스트입니다.. 실행환경 설정 oracle 데이터베이스 사용 DBeaver 사용 데이터베이스란? 데이터 : 어떤 자료나 실제 값 데이터베이스 : 데이터가 저장되는 공간. 연관된 데이터를 최대한 중복없이 구조적으로 저장해 놓은 곳 실시간 접근성 : 사용자가 데이터를 요청하면 실시간으로 서비스 계속적인 변화 : 최신 데이터를 유지 동시 공유 : 서로 다른 업무를 하는 사용자들이 동시에 접속해서 데이터를 공유하는게 가능. 내용에 따른 참조 : 데이터의 물리적 주소값이 아니라 데이터가 가지고 있는 값에 따라 참조된다. 데이터베이스의 장점 테이블 단위로 저장된다. 테이블을 구성하는 데이터의 조건, 자료형 설정 사용자가 규정한 형태의 데이터만 저장되어 관리될 수 있음 DBMS(Database Management System) 데이터베이스에서 데이터를 추출, 조작, 정의, 제어등을 할 수 있게 해주는 데이터베이스 관리 시스템","frontmatter":{"categories":"database","title":"데이터베이스 1일차 정리 01","date":"March 29, 2022"},"fields":{"slug":"/database/01-db0101/"}}},{"node":{"id":"d97eff24-e3cb-534d-9380-39e0dc146fbb","excerpt":"자바스크립트 deep dive 이벤트 이벤트 핸들러 : 이벤트가 발생되었을 때 브라우저에 호출을 위임한 함수 이벤트 핸들러 등록 브라우저는 이벤트 핸들러를 통해 지정한 함수를 호출","frontmatter":{"categories":"JS","title":"자바스크립트 - 이벤트","date":"March 28, 2022"},"fields":{"slug":"/JS/010-js-0224/"}}},{"node":{"id":"3e05843f-4051-5ee8-a1cd-663d19e814b4","excerpt":"‘모던 자바스크립트 Deep Dive’를 읽고 중요한 내용만 정리 타입변환 명시적 타입변환 : 값의 타입을 개발자가 의도적으로 변환하는 것을 명시적 타입변환 (Type casting)이라고 한다. 암묵적 타입변환 : 개발자의 의도와는 관계 없이 표현식을 평가하는 도중에 JS엔진에 의해 암묵적으로 타입이 변환(Type coercion) 원시값은 변경불가능한 값이기 때문에 기존 원시값을 이용해 새로운 값을 생성하는 과정. 표현식을 제대로 평가하기 위해 변환된 값을 사용하고 버린다. 단축평가 논리연산자를 사용한 단축평가 논리곱 연산자의 경우 양쪽 변이 모두 true라고 판정되어야 true가 반환된다. 따라서 이 경우에는 좌항에서 우항으로 평가가 이루어지는데 즉, 두번째 피연산자가 이 식의 결과를 반영한다는 의미로 볼 수 있다. 따라서 이 식은 두번째 피연산자를 반환한다.\n논리합 연산자는 두개 중 하나만 true로 평가되어도 true를 반환한다. 이때 좌항과 우항중에 좌항에 있는 요소만 …","frontmatter":{"categories":"JS","title":"자바스크립트 - 타입변환과 단축평가","date":"March 28, 2022"},"fields":{"slug":"/JS/02-js-0302/"}}},{"node":{"id":"a5dfd998-d3a0-547b-91cc-a15a8958a906","excerpt":"자바스크립트 deep dive JS의 객체 JS에서 원시값은 불변값이지만, 객체는 변경가능한 값이다. 프로퍼티들로 구성되며, 프로퍼티는 키와 값으로 구성된다. JS는 자바 같은 객체지향과 달리 프로토타입 기반으로 다양한 객체 생성 방법이 있음 객체 리터럴 Object 생성자 함수 생성자 함수 Objet.create() class (ES6) 객체 리터럴을 통해 생성 js에서 함수는 일급 객체로 값으로 취급할 수 있기 때문에 객체 프로퍼티 값으로 할당할 수 있다. 프로퍼티 접근 마침표를 통해 접근 대괄호를 통해 접근 프로퍼티 값 갱신, 삭제, 동적생성 객체 리터럴의 확장 기능 (ES6) 프로퍼티 축약 : 프로퍼티 값으로 변수를 사용하면 키:값이 동일한 이름이면 키를 생략할 수 있다. 계산된 프로퍼티 이름 : 표현식을 사용해 키를 동적으로 생성하는 경우. 표현식을 대괄호로 묶어준다. 메서드 축약표현 : 메서드를 정의할 대 키를 생략하고 함수이름만 설정해서 할당가능 원시값과 객체 비교 변…","frontmatter":{"categories":"JS","title":"자바스크립트 - 객체 리터럴","date":"March 28, 2022"},"fields":{"slug":"/JS/03-js-0304/"}}},{"node":{"id":"7bea9159-4c19-5b91-8e4f-12c79fe29bd7","excerpt":"자바스크립트 deep dive JS에서 함수 함수 : JS에서 함수는 객체타입의 값이며, 함수 리터럴로 생성해 변수에 할당 해줄 수 있다. 정의 방법 : 함수가 정의되면 식별자가 암묵적으로 생성되고 함수 객체가 할당. JS에서 함수는 리터럴로 사용되어 변수에 할당하거나, 프로퍼티 값으로 사용하거나, 배열의 요소로 넣을 수 있다. 일급 객체 : 값의 성질을 갖는 객체 함수 생성시점 함수 호출 함수가 호출되면, 함수 몸체 내에서 매개변수가 생성되고 일반 변수와 마찬가지로 undefined로 초기화된다. 매개변수는 함수의 몸체 내부에서만 참조할 수 있다. 함수 내부가 scope. 이후 호출에서 대입한 인수가 할당된다. 블록 내의 연산이 실행된 후 결과를 반환한다. 함수가 할당된 변수로 값이 반환된다. 다음과 같이 함수 내부에 인수가 적절하게 전달되었는지 타입 체크를 해주는 로직을 넣을 수도 있다. 이는 js에서는 런타임 전에 타입체크가 어렵기 때문 매개변수 기본값 (ES6) 다양한 함수…","frontmatter":{"categories":"JS","title":"자바스크립트 - 함수","date":"March 28, 2022"},"fields":{"slug":"/JS/04-js-0304/"}}},{"node":{"id":"bc5eb02e-819b-5031-ae5c-f868885570e1","excerpt":"‘모던 자바스크립트 Deep Dive’를 읽고 중요한 내용만 정리 배열(Array) 여러 개의 값을 순차적으로 나열한 자료구조. 자바와 달리 배열의 요소에 다양한 타입의 값을 넣을 수 있다. JS에서 배열은 객체로 취급된다. 배열은 배열 리터럴, Array 생성자 함수, Array.from 메서드로 생성할 수 있다. JS에서 배열과 객체의 차이 배열은 인덱스를 통해 값을 참조 / 객체는 프로퍼티 키 값을 통해 참조 배열은 값의 순서가 존재한다 / 객체는 값의 순서가 없다. 배열은 length property가 있다. / 객체는 길이를 나타내는 프로퍼티가 없다. JS에서 배열은 객체로 취급 일반적으로 배열은 동일한 크기의 메모리 공간이 빈틈없이 이어진 자료구조 (밀집 배열 dense array) JS에서는 요소가 동일한 메로리 공간 크기를 갖지 않으며 연속적이지 않다. (희소 배열 sparse array) JS에서 배열은 인덱스를 프로퍼티 키로 가지고 프로퍼티 값으로 각 배열 요소를…","frontmatter":{"categories":"JS","title":"자바스크립트 - 배열","date":"March 28, 2022"},"fields":{"slug":"/JS/05-js-0222/"}}},{"node":{"id":"8ba4d82a-5e47-5d36-8b61-970310f10f0d","excerpt":"자바스크립트 deep dive 스코프","frontmatter":{"categories":"JS","title":"자바스크립트 - 스코프","date":"March 28, 2022"},"fields":{"slug":"/JS/05-js-0222 copy/"}}},{"node":{"id":"9d9ef173-fb73-50ac-9e22-9abfd469267b","excerpt":"자바에서 네트워크 파트를 학습하고 정리한 내용입니다. 클라이언트 소켓 생성 소켓 객체 생성시 인자값 필요 (서버의 IP, 서버에서 열어준 프로세스의 포트번호) 본인의 IP주소는 localhost로 적어줄 수 있다. 서버용 소켓을 생성 ServerSocket : client 수만큼 socket을 생성해주는 공장 accept 메서드를 통해 클라이언트의 요청을 수락할 ‘소켓 생성’ 대기하다가 클라이언트가 ‘실제로 접속해서 감지’됐을 때 소켓 생성 채팅 프로그램 구현하기 우선 프로그램이 돌아가는 과정을 정리해보자. 서버를 가동시키고 - 클라이언트가 접속 클라이언트에 환영인사 전송 클라이언트가 닉네임 입력하고 전송 서버에서 “~님 접속하였습니다” 메세지 전송 클라이언트가 먼저 메세지 전송 서버에서 메세지를 받아 “~님 메세지 : 메세지 내용” 내용 출력 서버가 클라이언트에게 메세지 전송 클라이언트가 메세지를 받아 “서버 메세지 : 메세지 내용”을 출력 서버쪽 코드 클라이언트 쪽 코드 로그인…","frontmatter":{"categories":"java","title":"자바 네트워크 프로그래밍 02","date":"March 25, 2022"},"fields":{"slug":"/java/011-network02/"}}},{"node":{"id":"68ae9049-9780-53a0-a983-6d599fb0a911","excerpt":"자바에서 네트워크 파트를 학습하고 정리한 내용입니다. 클라이언트 소켓 생성 소켓 객체 생성시 인자값 필요 (서버의 IP, 서버에서 열어준 프로세스의 포트번호) 본인의 IP주소는 localhost로 적어줄 수 있다. 서버용 소켓을 생성 ServerSocket : client 수만큼 socket을 생성해주는 공장 accept 메서드를 통해 클라이언트의 요청을 수락할 ‘소켓 생성’ 대기하다가 클라이언트가 ‘실제로 접속해서 감지’됐을 때 소켓 생성 채팅 프로그램 구현하기 우선 프로그램이 돌아가는 과정을 정리해보자. 서버를 가동시키고 - 클라이언트가 접속 클라이언트에 환영인사 전송 클라이언트가 닉네임 입력하고 전송 서버에서 “~님 접속하였습니다” 메세지 전송 클라이언트가 먼저 메세지 전송 서버에서 메세지를 받아 “~님 메세지 : 메세지 내용” 내용 출력 서버가 클라이언트에게 메세지 전송 클라이언트가 메세지를 받아 “서버 메세지 : 메세지 내용”을 출력 서버쪽 코드 클라이언트 쪽 코드","frontmatter":{"categories":"java","title":"자바 네트워크 프로그래밍 01","date":"March 24, 2022"},"fields":{"slug":"/java/011-network01/"}}},{"node":{"id":"f613f015-a867-5dc1-914b-a77467732764","excerpt":"자바의 입출력과 관련된 부분을 학습하고 정리한 포스트입니다. 파일 입출력 파일을 객체로(인스턴스화) 만들어 사용 파일 생성자의 인자값 : HDD에서 해당 파일의 경로값, + 파일명 + 확장자 파일을 다룰 때 주의할 점 : 파일의 확장자까지 이름에 속한다. 스트림(Stream) 스트림 : 입력장치와 출력장치 사이에 데이터가 흐르는 통로 입력한 데이터는 입력 스트림을 통해 컴퓨터로 전달되고 출력스트림을 통해 출력장치로 전달된다. 파일은 입력 스트림을 통해 데이터로 프로그램으로 전달된다. 프로그램은 출력 스트림을 통해 데이터를 내보낸다.  try ~ catch 구문 try ~ with resource : try문이 끝나면 객체를 자동으로 반납할 수 있게 처리 try ~ catch ~ finally : finally문은 catch문에서 잡지 못한 나머지 예외를 잡기 위한 공간  입출력 관련 메서드 File클래스에 정의되어 있는 메서드들 파일 생성 (createNewFile), 디렉터리 생…","frontmatter":{"categories":"java","title":"자바 입출력 정리","date":"March 22, 2022"},"fields":{"slug":"/java/04-academy-fileio01/"}}},{"node":{"id":"a9c2fcc2-c348-5858-a212-258f5cbd72bb","excerpt":"자바 컬렉션 프레임워크 컬렉션(Collection) : 여러가지 종류의 객체를 모아놓은 것 프레임워크(Framework) : 표준화, 정형화 된 체계적인 프로그래밍 방식 Collection Framework : 다수의 데이터를 효과적으로 처리하기 위해서 표준화된 방법을 제공하는 클래스 들의 집합 JDK 1.2부터 제공 컬렉션 프레임워크의 주요 인터페이스 List / Map / Set List : 순서가 있는 데이터의 집합. 중복허용 Set : 순서를 유지하지 않는 데이터의 집합. 중복허용x Map : key-value 쌍으로 이루어진 데이터의 집합. 순서는 유지되지 않음. 키는 중복x 값은 중복o 컬렉션 인터페이스의 메서드 Collection 인터페이스 추가 : boolean add(Object o), boolean addAll(Collection c) void clear() 검색 : boolean contains(Object o), boolean containsAll(Collec…","frontmatter":{"categories":"java","title":"자바 Collection Framework","date":"March 22, 2022"},"fields":{"slug":"/java/06-academy-collection/"}}},{"node":{"id":"90dd96a8-603c-5bb9-8c11-9268fa14aeb4","excerpt":"자바 예외처리ㅋ 8.1 프로그램 에러 종류 컴파일 에러: 컴파일 중에 발생하는 에러 런타임 에러: 프로그램 실행 도중에 발생하는 에러 논리적 에러: 실행은 잘되나 의도한 것과 다르게 작동할 때 자바의 런타임 에러 error : 프로그램 코드에 의해 수습될 수 없는 심각한 오류 exception : 코드에 의해 수습될 수 있는 미약한 오류 에러는 발생하면 프로그램의 비정상적 종료를 막을 수 없지만 예외는 예외처리를 통해 종료를 막을 수 잇다. 에러 ex. OutOfMemoryError, StackOverflowError +) 컴파일러가 하는 일 구문체크, 번역, 최적화, 생략된 코드들을 추가 Exception 클래스의 계층구조 Exception IOException, ClassNotFoundException RuntimeException ArithmeticException ClassCastException NullPointerException IndexOutOfBoundsExcept…","frontmatter":{"categories":"java","title":"자바 예외처리","date":"March 22, 2022"},"fields":{"slug":"/java/07-java-exception/"}}},{"node":{"id":"b9898bb6-b7f0-571a-8778-8bcd32eb9298","excerpt":"제네릭 Generics 데이터 형식에 의존하지 않고, 하나의 값이 여러가지 다른 데이터 타입을 가질 수 있도록 하는 방법. 예를 들어, 우리가 어떤 자료구조를 만들어 배포하고 싶다고 하자, 그런데 지원하고 싶은 데이터가 String, Integer등 여러 가지 타입을 지원하고 싶을 때 제너릭을 사용한다. 정확하게는 컴파일 시 타입을 체크해주는 기능이다. (JDK 1.5) 사용자의 필요에 의해 타입을 지정 제네릭의 장점 잘못된 타입이 들어올 수 있는 것을 컴파일 레벨에서 방지할 수 있다. 타입 안정성 제공 : 클래스 외부에서 타입을 지정하므로 따로 타입을 체크하고 형변환할 필요가 없다. 비슷한 기능을 지원하는 경우 코드의 재사용성이 높아진다. ClassCastException(형변환에러)를 줄이고 코드를 간결하게 함 타입을 미리 추론해 런타임에서 발생하는 에러를 컴파일에러로 해결할 수 있도록 해준다. 위의 경우에 ArrayList에서 제너릭을 사용해 Object형 데이터만 다루도록 …","frontmatter":{"categories":"java","title":"자바 지네릭스 (Generics)","date":"March 22, 2022"},"fields":{"slug":"/java/07-java-generics/"}}},{"node":{"id":"b69797ec-40af-5744-99c5-045a5f7a942e","excerpt":"자바 객체지향 프로그래밍과 관련된 부분을 학습하고 정리한 포스트입니다. 다형성 상속","frontmatter":{"categories":"java","title":"자바 객체지향 프로그래밍 정리 - 추상메서드, 인터페이스","date":"March 21, 2022"},"fields":{"slug":"/java/05-academy-oop05/"}}},{"node":{"id":"8e9ed511-37e1-5ab6-8ef1-1d899d586a75","excerpt":"열거형(Enums) 자바에서는 타입에 안전한 열거형 (typesafe enum) 열거형에서는 상수간의 비교여서 ==를 사용할 수 있다. 비교연산자 <,> 는 사용할 수 없지만 compareTo()를 사용 compareTo() : 왼쪽이 크면 양수, 오른쪽이 크면 음수 열거형의 조상 - java.lang.Enum values() : 열거형의 모든 상수를 배열에 담아 반환 getDeclaringClass() : 열거형의 Class 객체를 반환 name() : 열거형 상수의 이름을 문자열로 반환 ordinal() : 열거형 상수가 정의된 순서를 반환 valueOf(Class enumType, String name) : 지정한 열거형에서 name과 일치하는 열거형 상수를 반환 열거형에 멤버 추가 열거형 상수를 정의할 때 값이 불규칙하면, 원하는 값을 괄호로 상수 이름 옆에 붙여준다. ordinal 대신 이 값을 사용. 열거형 상수를 모두 정의한 후에 인스턴스 변수와 생성자를 정의 열거형의…","frontmatter":{"categories":"java","title":"자바 열거형(Enums)","date":"March 21, 2022"},"fields":{"slug":"/java/05-java-enum/"}}},{"node":{"id":"2e590c2b-63d5-5571-a5d9-6d56a1d499b6","excerpt":"자바 객체지향 프로그래밍과 관련된 부분을 학습하고 정리한 포스트입니다. 다형성 상속(inheritance) 기존의 클래스를 재활용해서 새로운 클래스를 작성하는 과정이다. 코드의 중복을 제거하고 코드의 재사용성을 높일 수 있다. 클래스 간의 포함관계 클래스 들 간에 상속하지 않고 재사용하는 방법도 있다. 클래스 들 간에 포함관계(Composition)를 맺어준다. 포함관계를 맺어주는 것은 한 클래스의 멤버변수로 다른 클래스의 참조변수를 선언하는 것을 뜻한다. 상속 vs 포함 상속관계 : ~은 이다 (isa) 포함관계 : ~은 을 가지고 있다. (hasa)","frontmatter":{"categories":"java","title":"자바 객체지향 프로그래밍 정리 - 다형성, 상속","date":"March 21, 2022"},"fields":{"slug":"/java/04-academy-oop04/"}}},{"node":{"id":"4117c01a-1633-54b4-8c00-e5eee95e141d","excerpt":"dssss","frontmatter":{"categories":"TIL","title":"TIL_220319","date":"March 19, 2022"},"fields":{"slug":"/TIL/05_TIL_0319/"}}},{"node":{"id":"3c009919-7bce-5385-abd4-87903721a06b","excerpt":"dssss","frontmatter":{"categories":"TIL","title":"TIL_220318","date":"March 18, 2022"},"fields":{"slug":"/TIL/04_TIL_0318/"}}},{"node":{"id":"7bc97e09-f5ea-5c48-8c74-d744b4525338","excerpt":"dssss","frontmatter":{"categories":"TIL","title":"TIL_220317","date":"March 17, 2022"},"fields":{"slug":"/TIL/03_TIL_0317/"}}},{"node":{"id":"933f0407-5a4c-53a6-8786-f79f8c62dd5c","excerpt":"dssss","frontmatter":{"categories":"TIL","title":"TIL_220316","date":"March 16, 2022"},"fields":{"slug":"/TIL/02_TIL_0316/"}}},{"node":{"id":"d3adce31-eccd-548d-b659-64ec2eb8c6ba","excerpt":"자바 객체지향 프로그래밍과 관련된 부분을 학습하고 정리한 포스트입니다. 오버라이딩(overriding) 조상 클래스로부터 상속받은 메서드의 내용을 변경하는 것 조건 : 이름 / 매개변수 / 반환타입 이 같아야 한다. (선언부) 접근제어자와 예외는 제한된 조건에서 변경가능 조상클래스보다 넓거나 같게는 변경가능 (ex. protected -> public / protected ) 조상클래스보다 많은 예외를 등록할 수 없다. 인스턴스 메서드를 static 메서드 또는 반대로 변경할 수 없음 오버로딩 vs 오버라이딩 overloading : 기존에 없는 새로운 메서드를 정의 overriding : 상속받은 메서드의 내용을 변경 super 자손 클래스에서 조상클래스의 상속받은 멤버를 참조하기 위해 사용하는 변수 super() - 조상클래스의 생성자 조상클래스의 생성자를 자식클래스에서 호출할 때 사용 조상클래스의 생성자를 호출하면 자손클래스의 인스턴스에서 조상클래스의 멤버를 사용할 수 있다.…","frontmatter":{"categories":"java","title":"자바 객체지향 프로그래밍 정리 - 오버로딩","date":"March 15, 2022"},"fields":{"slug":"/java/03-academy-oop03/"}}},{"node":{"id":"2b8a16e4-a145-5f20-9137-8a709eaf142e","excerpt":"자바 객체지향 프로그래밍과 관련된 부분을 학습하고 정리한 포스트입니다.  변수의 종류 지역변수 : 메서드 내에 선언되어 메서드 내에서만 사용가능한 변수 인스턴스변수 : 클래스 영역에서 선언되며, 인스턴스를 생성할 때 만들어진다. 인스턴스는 독립된 저장공간을 가지므로 서로 다른 값을 가질 수 있다. 클래스 변수 : 인스턴스를 생성하지 않아도 어디서나 사용할 수 있는 변수 [클래스이름.클래스변수] 와 같이 사용된다. ex. Variable.cv 클래스가 메모리에 로딩될때 생성되어 프로그램이 종료될 때까지 유지된다. 제어자를 public 붙이면 어디서나 접근할 수 있는 전역변수global variable의 성격을 가진다. 클래스변수와 인스턴스 변수 클래스변수 : 각 개체가 고유한 값을 가지고 있어야 할때. 인스턴스변수 : 각 개체가 특별한 값을 가지고 있어야 할때. 생성자 인스턴스가 생성될 때 호출되는 ‘인스턴스 초기화 메서드’. 인스턴스 초기화 작업에 주로 사용된다. 생성자의 조건 :…","frontmatter":{"categories":"java","title":"자바 객체지향 프로그래밍 정리 02 - 메서드, 생성자","date":"March 15, 2022"},"fields":{"slug":"/java/02-academy-oop02/"}}},{"node":{"id":"fb7e0336-113a-504d-bdb2-7dd9ca167efc","excerpt":"dssss","frontmatter":{"categories":"TIL","title":"TIL_220315","date":"March 15, 2022"},"fields":{"slug":"/TIL/01_TIL_0315/"}}},{"node":{"id":"9c09ee1f-6019-5b60-bd58-c52dd00d404f","excerpt":"자바 객체지향 프로그래밍과 관련된 부분을 학습하고 정리한 포스트입니다. 객체지향 언어의 특징 코드의 재사용성이 높다 - 기존의 코드를 재활용 (상속) 코드의 관리가 용이하다 - 포함관계, 오버라이딩 신뢰성 높은 프로그래밍이 가능하다. - 제어자, 메서드 활용하여 코드의 중복을 제거 객체의 구성요소 속성(property) : 멤버변수, 특성, 필드, 상태 기능(function) : 메서드, 함수, 행위 클래스와 인스턴스 클래스 : 객체를 정의 해놓은 설계도. 객체를 생성하기 위해 사용된다. 클래스를 만든다 -> 자료형을 만든다. 인스턴스(객체) : 어떤 클래스로부터 만들어진 객체를 인스턴스라고 한다. 인스턴스 : new 연산자를 통해 heap영역 안에 저장할 수 있는 공간. laptop.brand = “LG”; // .을 찍어서 주소값으로 따라가 heap영역으로 간다. 추상화와 캡슐화 추상화 : 캡슐화를 구현하는 방법 사용자가 접근하면 안되는 데이터들을 내부적으로 숨기거나 접근을 제…","frontmatter":{"categories":"java","title":"자바 객체지향 프로그래밍 정리 01","date":"March 11, 2022"},"fields":{"slug":"/java/01-academy-oop01/"}}},{"node":{"id":"919683eb-0f92-564c-a8bc-5ec787c2d4d8","excerpt":"국비수업 10일차. 오늘은","frontmatter":{"categories":"회고","title":"국비학원 10일차 회고","date":"March 10, 2022"},"fields":{"slug":"/java-devcourse/09-academy-day10/"}}},{"node":{"id":"3bc9588a-9328-5af6-ab89-fd5d08880fcc","excerpt":"국비수업 9일차. 오늘은 함수 파트! 함수란? (Function) 자바에서 기능을 이야기하는 것 특정한 작업을 수행하기 위해서 모아놓은 명령문의 집합 함수의 구성 정의부 : 메서드에 대해 어떤 기능을 수행할지 설명해놓은 부분 매개변수 : 호출부룰 통해 전달된 인자값을 받아주는 변수 리턴 자료형 : 메서드명 왼쪽에 반환하고자 하는 자료형을 적는다. return : 함수에서 수행한 결과를 돌려준다. return을 만나는 순간 결과값과 함께 메서드 영역을 벗어나 버림 호출부 : 정의된 메서드를 불러와서 사용하는 부분 함수를 사용하면 좋은 점 코드가 분리되므로 가독성이 좋아진다 유지보수하기에 좋다 코드의 재활용성이 높아진다. 함수의 매개변수와 리턴값 오버로딩(Overloading) 메서드가 정의됐을 때는 하나의 기능이 있음 기존의 메서드가 가지고 있는 기능에 추가적인 인자값이나 자료형의 변화를 줘서 기본적인 형태를 다양화할 수 있는 문법 오버로딩 성립이 안되는 경우 (반환타입이 다른 경우)","frontmatter":{"categories":"회고","title":"국비학원 9일차 회고","date":"March 08, 2022"},"fields":{"slug":"/java-devcourse/08-academy-day09/"}}},{"node":{"id":"bb0e7a6f-af61-5831-823a-2fbd0bd58e37","excerpt":"국비수업 8일차. 오늘은 새롭게 나가는 배열 파트! 배열(Array)이란? 같은 타입의 데이터를 연속된 공간에 나열시키고, 데이터 각각을 인덱스라는 걸 이용해서 사용할 수 있도록 만들어 놓은 자료구조이다. 변수는 한개의 원시 데이터만 저장할 수 있지만 배열에서 부터는 여러 개의 데이터를 한번에 저장해서 쓸 수 있다. 배열 선언하기 : 선언은  같은 형태로 하면 된다. 배열 초기화 : new 연산자를 통해 heap 공간에 생성하고 참조변수에 주소값을 대입한다. 위 내용을 설명하자면 대입연산자(=) 왼쪽은 int형 데이터들을 저장할 수 있는 배열의 ‘주소값’을 저장하는 변수를 만드는 것이다. 이걸 참조변수 라고 부르는데 여기는 배열을 찾아갈 주소가 담기는 공간 이라고 생각하면 된다. 그럼 배열은 어디있냐고? 대입연산자 오른쪽에 new 연산자를 통해 메모리의 heap영역이라는 곳에 배열이라는 자료구조 (위의 경우에는 5칸) 가 생성된다. 그리고 그 배열을 찾아갈 수 있는 주소를 arr …","frontmatter":{"categories":"회고","title":"국비학원 8일차 회고","date":"March 07, 2022"},"fields":{"slug":"/java-devcourse/07-academy-day08/"}}},{"node":{"id":"686c8970-b0e6-58f9-8367-84afb87b23e1","excerpt":"국비수업 일주일차. 자바 프로그래밍 평가.","frontmatter":{"categories":"회고","title":"국비학원 1주일차 회고","date":"March 04, 2022"},"fields":{"slug":"/java-devcourse/06-academy-day07/"}}},{"node":{"id":"8da7510a-4ed7-5bd8-bdf3-cbbca42e5035","excerpt":"국비수업 6일차 때 배운 내용을 개인적으로 정리. 오늘은 어제 나간 반복문에 이어서 배웠음.","frontmatter":{"categories":"회고","title":"국비학원 6일차 회고","date":"March 03, 2022"},"fields":{"slug":"/java-devcourse/05-academy-day06/"}}},{"node":{"id":"82da94b6-2805-5037-9c90-0919b9d4a3db","excerpt":"국비수업 5일차 때 배운 내용을 개인적으로 정리. 오늘은 자바의 제어문 중 반복문에 대해 배웠음. 1. for\n2. while 1. 반복문(Loop)  프로그램의 흐름을 반복시켜주는 제어문. 반복문은 조건식을 충족하는 동안은 중괄호 내의 코드가 반복되어 실행한다. 조건식을 불충족하는 순간 반복문을 벗어나 원래 코드 흐름으로 돌아간다. 조건식을 충족시키면 안쪽 코드가 실행되고 끝나기 직전에 증감식이 실행되는 순서이다. 1. for 초기식 : 몇 번부터 시작할건지 조건식 : 언제까지 반복할건지 증감식 : 안쪽 코드가 반복될 때마다 한번씩 실행 2. while 조건식만 요구하는 반복문, 초기식과 증감문은 없어도 된다. 언제까지 코드를 반복해야 할지 모를 때, 특별한 일이 일어나지 않을 때까지 코드 반복. 보통 무한루프를 구현하기 위해 많이 사용 예제 문제 예제 1. 1부터 사용자가 입력한 값까지 반복 예제 2. 1부터 사용자가 입력한 값에서 ‘홀수’만 출력 나머지 연산으로 ‘나머지가 1…","frontmatter":{"categories":"회고","title":"국비학원 5일차 회고","date":"March 02, 2022"},"fields":{"slug":"/java-devcourse/04-academy-day05/"}}},{"node":{"id":"53bc1a84-23a0-51c1-9f01-6e06fce4fa71","excerpt":"dssss","frontmatter":{"categories":"알고리즘","title":"알고리즘01","date":"February 28, 2022"},"fields":{"slug":"/algorithm/01-algorithm-0228/"}}},{"node":{"id":"cdf0c57b-fbaa-5b4d-9a0f-09ffb664db5c","excerpt":"‘모던 자바스크립트 Deep Dive’를 읽고 중요한 내용만 정리 블록문 (block statement) 코드 블록 JS에서는 단독으로 사용할 수도 있지만 일반적으로 제어문이나 함수를 정의할 때 같이 사용 조건문 (conditional) if-else JS에서 if조건식은 boolean 값으로 평가되어야 한다. boolean값이 아니면 JS엔진에 의해 타입변환 되어 판단. js에서도 블록문이 1줄이면 중괄호를 생략해서 사용할 수 있다. 삼항 연산자도 사용가능 if-else문은 값처럼 할당할 수 없기 때문에 삼항연산자를 사용해 변수에 할당 switch switch문의 특징은 만족하는 특정 case를 실행하고 탈출하지 않고 다음 case가 실행된다는 점이다 따라서 switch문은 break문과 같이 사용한다. 윤년 계산 알고리즘 (switch의 fall through를 이용) 반복문(Loop) for while do…while","frontmatter":{"categories":"JS","title":"자바스크립트 제어문","date":"February 28, 2022"},"fields":{"slug":"/JS/01-js-0228/"}}},{"node":{"id":"6f2a7176-1d53-5149-8dcf-65cdf62484c2","excerpt":"국비수업 4일차 때 배운 내용을 개인적으로 정리. String, 형변환, 연산자, Scanner 등의 내용을 다룰 예정 String 데이터 타입 형변환(Casting) 형변환(Casting) : 데이터의 자료형을 변환하는 것 개발자가 데이터의 타입을 예측하지 못했을 때 개발자가 원하는 대로 데이터 타입을 사용하기 위해서 데이터타입을 변경 자동 형변환(promotion) : 작은 자료형에서 큰 자료형으로 변환이 이루어지는 경우 강제 형변환(down casting) : 큰 자료형에서 작은 자료형으로 변환이 이루어지는 경우 ( 데이터의 손실이 일어날 수 있음 ) 정수와 실수 사이 형변환 char 자료형의 특징 연산자 산술연산자 (사칙연산 + - * / %) 대입연산자 (=, +=, -=, /=, *=, %=) 비교연산자 ( <, > <=, >=, ==, !=) 증감연산자 (전위연산, 후위연산) 논리연산자 (&& and || or) 삼항연산자 (조건식A ? b : c) 산술연산 비교연산 …","frontmatter":{"categories":"회고","title":"국비학원 4일차 회고","date":"February 28, 2022"},"fields":{"slug":"/java-devcourse/03-academy-day04/"}}},{"node":{"id":"cd44d0fc-1ade-5bd5-b219-3d49aad64415","excerpt":"국비수업 2~3일차 때 배운 내용을 개인적으로 정리. 자바 프로그래밍을 위한 환경 셋팅부터 변수파트 까지 1. 자바 환경설정 하는 법 자바 프로그래밍을 위해서 JDK가 필요함 기존에 Oracle JDK를 사용하고 있었지만, 최적의 환경셋팅을 위해 제거하고 OpenJDK 11을 설치하였음 Windows환경에서는 OpenJDK github repo 에서 다운받아서 설치하고 환경변수 설정하면 됨 본인은 MacOS 환경에서 homebrew 사용해서 AdoptOpenJDK 다운받아서 설치\n homebrew를 이용해 JDK 다운로드 방법 이후 설치 완료되면  커맨드로 설치 잘 됐는지 확인 JDK 설치가 완료되면 Eclipse 설치, 추후에 웹프로젝트를 위해 Java EE 버전을 사용  2. 자바로 hello world 출력하기 File - New - Java Project 로 새 프로젝트 생성 main 함수 안에 println 을 사용하여 문자를 출력할 수 있다. print : 같은 줄에 출…","frontmatter":{"categories":"회고","title":"국비학원 2~3일차 회고","date":"February 25, 2022"},"fields":{"slug":"/java-devcourse/02-academy-day02/"}}},{"node":{"id":"3f47ca7a-af17-5761-a67f-768c31350f75","excerpt":"dssss","frontmatter":{"categories":"회고","title":"국비학원 OT","date":"February 23, 2022"},"fields":{"slug":"/java-devcourse/01-academy-day01-OT/"}}},{"node":{"id":"3ba6acde-aacf-5f78-bce7-5e21fec3dddb","excerpt":"👋 제목은 샵을 앞에 붙여서! 일반적인 내용은 이렇게 적으면 됩니다. 여기는 quote를 적는 부분! 링크 > 스타는 블로그 테마!⭐️ 🔧 코드블럭은 이렇게 입력 single quotation을 쓰면  Deploy to Netlify 🏃‍♀️ 실행하기 아래처럼 입력하면 여러줄의 코드블럭도 입력가능! 위 명령어가 문제 없이 실행됐다면 http://localhost:8000에서 블로그를 확인하실 수 있습니다. 1. 블로그 기본 정보 2. 댓글 설정 블로그 글들에 댓글을 달 수 있길 원하신다면 utterances를 통해서 이를 설정하실 수 있습니다. 🦄 utterances 사용방법은 링크를 참고해주세요! 3. 글쓴이 정보 글쓴이(author)에 입력하신 정보는 홈페이지와 about 페이지 상단에 있는 글쓴이를 소개하는 섹션인 bio에서 사용됩니다. description에 자신을 설명하는 문구들을 넣으면 애니메이션으로 보여지게 됩니다. bio에 들어가는 이미지를 바꾸시려면 에 원하시는 파일을 추…","frontmatter":{"categories":"블로그","title":"블로그 포스팅 양식","date":"January 22, 2021"},"fields":{"slug":"/java-devcourse/"}}}]},"site":{"siteMetadata":{"language":"ko","author":{"name":"bontae","bio":{"role":"개발자","description":["배움이 즐거운","능동적으로 일하는","이로운 것을 만드는"],"thumbnail":"sample.png"},"social":{"github":"","linkedIn":"","email":""}}}}},"pageContext":{}},
    "staticQueryHashes": ["1073350324","1956554647","2938748437","3350743975"]}