{
    "componentChunkName": "component---src-templates-blog-template-js",
    "path": "/java/07-java-generics/",
    "result": {"data":{"cur":{"id":"b9898bb6-b7f0-571a-8778-8bcd32eb9298","html":"<h2 id=\"제네릭-generics\" style=\"position:relative;\"><a href=\"#%EC%A0%9C%EB%84%A4%EB%A6%AD-generics\" aria-label=\"제네릭 generics permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>제네릭 Generics</h2>\n<ul>\n<li>데이터 형식에 의존하지 않고, 하나의 값이 여러가지 다른 데이터 타입을 가질 수 있도록 하는 방법.</li>\n<li>예를 들어, 우리가 어떤 자료구조를 만들어 배포하고 싶다고 하자, 그런데 지원하고 싶은 데이터가 String, Integer등 여러 가지 타입을 지원하고 싶을 때 제너릭을 사용한다.</li>\n<li>정확하게는 컴파일 시 타입을 체크해주는 기능이다. (JDK 1.5)</li>\n<li>사용자의 필요에 의해 타입을 지정</li>\n</ul>\n<h2 id=\"제네릭의-장점\" style=\"position:relative;\"><a href=\"#%EC%A0%9C%EB%84%A4%EB%A6%AD%EC%9D%98-%EC%9E%A5%EC%A0%90\" aria-label=\"제네릭의 장점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>제네릭의 장점</h2>\n<ul>\n<li>잘못된 타입이 들어올 수 있는 것을 컴파일 레벨에서 방지할 수 있다.</li>\n<li>타입 안정성 제공 : 클래스 외부에서 타입을 지정하므로 따로 타입을 체크하고 형변환할 필요가 없다.</li>\n<li>비슷한 기능을 지원하는 경우 코드의 재사용성이 높아진다.</li>\n<li>ClassCastException(형변환에러)를 줄이고 코드를 간결하게 함</li>\n<li>타입을 미리 추론해 런타임에서 발생하는 에러를 컴파일에러로 해결할 수 있도록 해준다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ArrayList</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">GenericList</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> list <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tlist<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// autoboxing</span>\n\t\tlist<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tlist<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"30\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 타입체크가 강화</span>\n\n\t\t<span class=\"token class-name\">Integer</span> i <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">)</span>list<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">//컴파일 할때는 문제가 없었는데 실행할때 컴파일 에러</span>\n\n\t\t<span class=\"token class-name\">String</span> i <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span>list<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위의 경우에 ArrayList에서 제너릭을 사용해 Object형 데이터만 다루도록 지정하고 있다. add를 통해 첫번째, 두번째 요소는 오토박싱으로 형변환되서 문제없이 추가되지만 세번째 요소부터는 에러가 발생</p>\n<h2 id=\"타입변수-t\" style=\"position:relative;\"><a href=\"#%ED%83%80%EC%9E%85%EB%B3%80%EC%88%98-t\" aria-label=\"타입변수 t permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>타입변수 T</h2>\n<ul>\n<li>클래스를 작성할 때 Object 대신 T를 선언하여 사용</li>\n<li>객체를 new로 생성할 때 타입변수 대신 실제 타입을 대입</li>\n<li>타입 변수 대신 실제 타입이 지정되면, 형변환을 생략할 수 있음</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ArrayList</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Tv</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Audio</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">GenericList</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token class-name\">ArrayList</span> list <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Tv</span><span class=\"token punctuation\">></span></span> list2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Tv</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// Tv타입의 객체만 저장가능</span>\n\t\tlist<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Tv</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">// list.add(new Audio()); 에러</span>\n\n\t\t<span class=\"token comment\">// Tv t = (Tv)list.get(0); 옛날 형변환필요</span>\n\t\t<span class=\"token class-name\">Tv</span> t <span class=\"token operator\">=</span> list2<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 형변환 불필요(타입일치)</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"원시타입\" style=\"position:relative;\"><a href=\"#%EC%9B%90%EC%8B%9C%ED%83%80%EC%9E%85\" aria-label=\"원시타입 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>원시타입</h2>\n<h2 id=\"지네릭과-다형성\" style=\"position:relative;\"><a href=\"#%EC%A7%80%EB%84%A4%EB%A6%AD%EA%B3%BC-%EB%8B%A4%ED%98%95%EC%84%B1\" aria-label=\"지네릭과 다형성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>지네릭과 다형성</h2>\n<ul>\n<li>참조변수와 생성자의 대입된 타입은 일치해야 한다</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Tv</span><span class=\"token punctuation\">></span></span> list <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Tv</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li>지네릭 클래스 끼리의 다형성은 성립</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Tv</span><span class=\"token punctuation\">></span></span> list <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Tv</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Tv</span><span class=\"token punctuation\">></span></span> list <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LinkedList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Tv</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li>매개변수의 다형성도 성립</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Product</span><span class=\"token punctuation\">></span></span> list <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Product</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nlist<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Product</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nlist<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Tv</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 가능</span>\nlist<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Audio</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 가능</span></code></pre></div>\n<h2 id=\"와일드카드-\" style=\"position:relative;\"><a href=\"#%EC%99%80%EC%9D%BC%EB%93%9C%EC%B9%B4%EB%93%9C-\" aria-label=\"와일드카드  permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>와일드카드 &#x3C;?></h2>\n<ul>\n<li>하나의 참조변수로 대입된 타입이 다른 객체를 참조할 수 있다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Product</span><span class=\"token punctuation\">></span></span> list <span class=\"token comment\">// Product와 그 자손들만 가능</span>\n<span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">extends</span> <span class=\"token keyword\">super</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> list <span class=\"token comment\">// T와 그 조상들만 가능</span>\n<span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> list <span class=\"token comment\">// 제한없음 모든 타입 가능 &lt;? extends Object></span></code></pre></div>\n<h2 id=\"제너릭-메서드\" style=\"position:relative;\"><a href=\"#%EC%A0%9C%EB%84%88%EB%A6%AD-%EB%A9%94%EC%84%9C%EB%93%9C\" aria-label=\"제너릭 메서드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>제너릭 메서드</h2>\n<ul>\n<li>Generic 타입이 선언된 메서드 (타입변수는 메서드 내에서만 유효)</li>\n<li>메서드를 호출할 때마다 타입을 대입한다.</li>\n<li>와일드카드는 하나의 참조변수로 서로 다른 타입이 대입된 여러 객체를 다루기 위함</li>\n<li>generic 메서드</li>\n</ul>","excerpt":"제네릭 Generics 데이터 형식에 의존하지 않고, 하나의 값이 여러가지 다른 데이터 타입을 가질 수 있도록 하는 방법. 예를 들어, 우리가 어떤 자료구조를 만들어 배포하고 싶다고 하자, 그런데 지원하고 싶은 데이터가 String, Integer등 여러 가지 타입을 지원하고 싶을 때 제너릭을 사용한다. 정확하게는 컴파일 시 타입을 체크해주는 기능이다. (JDK 1.5) 사용자의 필요에 의해 타입을 지정 제네릭의 장점 잘못된 타입이 들어올 수 있는 것을 컴파일 레벨에서 방지할 수 있다. 타입 안정성 제공 : 클래스 외부에서 타입을 지정하므로 따로 타입을 체크하고 형변환할 필요가 없다. 비슷한 기능을 지원하는 경우 코드의 재사용성이 높아진다. ClassCastException(형변환에러)를 줄이고 코드를 간결하게 함 타입을 미리 추론해 런타임에서 발생하는 에러를 컴파일에러로 해결할 수 있도록 해준다. 위의 경우에 ArrayList에서 제너릭을 사용해 Object형 데이터만 다루도록 …","frontmatter":{"date":"March 22, 2022","title":"자바 지네릭스 (Generics)","categories":"java","author":"bontaedev","emoji":"🪤"},"fields":{"slug":"/java/07-java-generics/"}},"next":{"id":"b69797ec-40af-5744-99c5-045a5f7a942e","html":"<blockquote>\n<h2 id=\"자바-객체지향-프로그래밍과-관련된-부분을-학습하고-정리한-포스트입니다\" style=\"position:relative;\"><a href=\"#%EC%9E%90%EB%B0%94-%EA%B0%9D%EC%B2%B4%EC%A7%80%ED%96%A5-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D%EA%B3%BC-%EA%B4%80%EB%A0%A8%EB%90%9C-%EB%B6%80%EB%B6%84%EC%9D%84-%ED%95%99%EC%8A%B5%ED%95%98%EA%B3%A0-%EC%A0%95%EB%A6%AC%ED%95%9C-%ED%8F%AC%EC%8A%A4%ED%8A%B8%EC%9E%85%EB%8B%88%EB%8B%A4\" aria-label=\"자바 객체지향 프로그래밍과 관련된 부분을 학습하고 정리한 포스트입니다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>자바 객체지향 프로그래밍과 관련된 부분을 학습하고 정리한 포스트입니다.</h2>\n</blockquote>\n<h1 id=\"다형성\" style=\"position:relative;\"><a href=\"#%EB%8B%A4%ED%98%95%EC%84%B1\" aria-label=\"다형성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>다형성</h1>\n<h1 id=\"상속\" style=\"position:relative;\"><a href=\"#%EC%83%81%EC%86%8D\" aria-label=\"상속 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>상속</h1>","frontmatter":{"date":"March 21, 2022","title":"자바 객체지향 프로그래밍 정리 - 추상메서드, 인터페이스","categories":"java","author":"bontaedev","emoji":"🪤"},"fields":{"slug":"/java/05-academy-oop05/"}},"prev":{"id":"90dd96a8-603c-5bb9-8c11-9268fa14aeb4","html":"<blockquote>\n<h2 id=\"자바-예외처리ㅋ\" style=\"position:relative;\"><a href=\"#%EC%9E%90%EB%B0%94-%EC%98%88%EC%99%B8%EC%B2%98%EB%A6%AC%E3%85%8B\" aria-label=\"자바 예외처리ㅋ permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>자바 예외처리ㅋ</h2>\n</blockquote>\n<h1 id=\"81-프로그램-에러-종류\" style=\"position:relative;\"><a href=\"#81-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%A8-%EC%97%90%EB%9F%AC-%EC%A2%85%EB%A5%98\" aria-label=\"81 프로그램 에러 종류 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>8.1 프로그램 에러 종류</h1>\n<ul>\n<li>컴파일 에러: 컴파일 중에 발생하는 에러</li>\n<li>런타임 에러: 프로그램 실행 도중에 발생하는 에러</li>\n<li>논리적 에러: 실행은 잘되나 의도한 것과 다르게 작동할 때</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>자바의 런타임 에러</p>\n<ul>\n<li>error : 프로그램 코드에 의해 수습될 수 없는 심각한 오류</li>\n<li>exception : 코드에 의해 수습될 수 있는 미약한 오류</li>\n</ul>\n<p>에러는 발생하면 프로그램의 비정상적 종료를 막을 수 없지만 예외는 예외처리를 통해 종료를 막을 수 잇다.</p>\n<p>에러 ex. OutOfMemoryError, StackOverflowError</p>\n<p>+) 컴파일러가 하는 일</p>\n<ul>\n<li>구문체크, 번역, 최적화, 생략된 코드들을 추가</li>\n</ul>\n<h2 id=\"exception-클래스의-계층구조\" style=\"position:relative;\"><a href=\"#exception-%ED%81%B4%EB%9E%98%EC%8A%A4%EC%9D%98-%EA%B3%84%EC%B8%B5%EA%B5%AC%EC%A1%B0\" aria-label=\"exception 클래스의 계층구조 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Exception 클래스의 계층구조</h2>\n<ul>\n<li>Exception</li>\n<li>IOException, ClassNotFoundException</li>\n<li>RuntimeException\n<ul>\n<li>ArithmeticException</li>\n<li>ClassCastException</li>\n<li>NullPointerException</li>\n<li>IndexOutOfBoundsException</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"exception과-runtimeexception\" style=\"position:relative;\"><a href=\"#exception%EA%B3%BC-runtimeexception\" aria-label=\"exception과 runtimeexception permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Exception과 RuntimeException</h1>\n<ul>\n<li>RuntimeException : 프로그래머의 실수에 의해 발생할 수 있는 예외\nex. IndexOutOfBoundsException, NullPointException, ClassCastException, ArithmeticException</li>\n<li>Exception클래스 : 사용자와 같은 외부의 영향으로 발생할 수 있는 예외\nex. FileNotFoundException, ClassNotFoundException, DataFormatException</li>\n</ul>\n<h1 id=\"예외처리--try-catch\" style=\"position:relative;\"><a href=\"#%EC%98%88%EC%99%B8%EC%B2%98%EB%A6%AC--try-catch\" aria-label=\"예외처리  try catch permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>예외처리 : try-catch</h1>\n<ul>\n<li>예외처리: 프로그램 실행시 발생할 수 있는 예외의 발생한 대비한 코드를 작성하는 것</li>\n<li>비정상적인 종료를 막고 실행상태를 유지하기 위해</li>\n<li>처리하지 못한 예외는 JVM의 예외처리기(UncaughtExceptionHandler)가 받아서 원인을 화면에 출력</li>\n</ul>\n<h2 id=\"예외처리-과정\" style=\"position:relative;\"><a href=\"#%EC%98%88%EC%99%B8%EC%B2%98%EB%A6%AC-%EA%B3%BC%EC%A0%95\" aria-label=\"예외처리 과정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>예외처리 과정</h2>\n<ul>\n<li>첫번째 catch블록부터 차례로 내려가면서 catch블록 내의 괄호에 선언된 참조변수의 종류와 생성된 예외클래스의 인스턴스에 instanceof 연산자를 통해 검사</li>\n<li>검사결과 true인 catch블록을 만날 때까지 검사하고, 찾으면 블럭의 문장을 모두 수행한 후에 try-catch문을 빠져나가고 예외는 처리</li>\n</ul>\n<h1 id=\"finally\" style=\"position:relative;\"><a href=\"#finally\" aria-label=\"finally permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>finally</h1>\n<ul>\n<li>Try-catch문과 함께 예외 발생여부와 상관없이 실행해야 할 코드를 포함시킬 목적으로 만들어짐</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">Ex</span><span class=\"token punctuation\">.</span>\n\n<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">//   예외가 발생할 가능성이 있는 코드</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// 인스턴스 e에 instanceof연산자를 통해 검사</span>\n  <span class=\"token comment\">// 예외처리를 위한 코드</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 예외와 상관없이 실행되는 코드</span>\n  <span class=\"token comment\">// finally문은 try-catch의 마지막 문단에 위치</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h1 id=\"printstacktrace-getmessage\" style=\"position:relative;\"><a href=\"#printstacktrace-getmessage\" aria-label=\"printstacktrace getmessage permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>printStackTrace(), getMessage()</h1>\n<ul>\n<li>예외 발생시 예외 객체가 생성되고 메서드를 통해 확인할 수 있다.</li>\n<li>printStackTrace() : 예외발생 당시의 호출스택 call stack에 있었던 메서드의 정보와 예외 메세지를 화면에 출력</li>\n<li>getMessage() : 발생한 예외 클래스의 인스턴스에 저장된 메세지를 얻을 수 있다.</li>\n</ul>\n<h2 id=\"멀티-catch-블록-jdk17\" style=\"position:relative;\"><a href=\"#%EB%A9%80%ED%8B%B0-catch-%EB%B8%94%EB%A1%9D-jdk17\" aria-label=\"멀티 catch 블록 jdk17 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>멀티 catch 블록 (JDK1.7)</h2>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ExceptionA</span> <span class=\"token operator\">|</span> <span class=\"token class-name\">ExceptionB</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\ne<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"throw-예외-발생시키기\" style=\"position:relative;\"><a href=\"#throw-%EC%98%88%EC%99%B8-%EB%B0%9C%EC%83%9D%EC%8B%9C%ED%82%A4%EA%B8%B0\" aria-label=\"throw 예외 발생시키기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>throw 예외 발생시키기</h2>\n<ul>\n<li>new를 통해서 예외 클래스 객체를 만든다음</li>\n<li>throw를 통해서 예외를 발생시킨다</li>\n</ul>","frontmatter":{"date":"March 22, 2022","title":"자바 예외처리","categories":"java","author":"bontaedev","emoji":"🪤"},"fields":{"slug":"/java/07-java-exception/"}},"site":{"siteMetadata":{"siteUrl":"https://bontaedev.github.io","comments":{"utterances":{"repo":""}}}}},"pageContext":{"slug":"/java/07-java-generics/","nextSlug":"/java/05-academy-oop05/","prevSlug":"/java/07-java-exception/"}},
    "staticQueryHashes": ["1073350324","1956554647","2938748437"]}