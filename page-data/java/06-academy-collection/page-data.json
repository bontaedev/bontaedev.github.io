{
    "componentChunkName": "component---src-templates-blog-template-js",
    "path": "/java/06-academy-collection/",
    "result": {"data":{"cur":{"id":"a9c2fcc2-c348-5858-a212-258f5cbd72bb","html":"<blockquote>\n<h2 id=\"자바-컬렉션-프레임워크\" style=\"position:relative;\"><a href=\"#%EC%9E%90%EB%B0%94-%EC%BB%AC%EB%A0%89%EC%85%98-%ED%94%84%EB%A0%88%EC%9E%84%EC%9B%8C%ED%81%AC\" aria-label=\"자바 컬렉션 프레임워크 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>자바 컬렉션 프레임워크</h2>\n</blockquote>\n<ul>\n<li>컬렉션(Collection) : 여러가지 종류의 객체를 모아놓은 것</li>\n<li>프레임워크(Framework) : 표준화, 정형화 된 체계적인 프로그래밍 방식</li>\n<li>Collection Framework : 다수의 데이터를 효과적으로 처리하기 위해서 표준화된 방법을 제공하는 클래스 들의 집합</li>\n<li>JDK 1.2부터 제공</li>\n</ul>\n<h2 id=\"컬렉션-프레임워크의-주요-인터페이스\" style=\"position:relative;\"><a href=\"#%EC%BB%AC%EB%A0%89%EC%85%98-%ED%94%84%EB%A0%88%EC%9E%84%EC%9B%8C%ED%81%AC%EC%9D%98-%EC%A3%BC%EC%9A%94-%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4\" aria-label=\"컬렉션 프레임워크의 주요 인터페이스 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>컬렉션 프레임워크의 주요 인터페이스</h2>\n<ul>\n<li>\n<p>List / Map / Set</p>\n<ul>\n<li>List : 순서가 있는 데이터의 집합. 중복허용</li>\n<li>Set : 순서를 유지하지 않는 데이터의 집합. 중복허용x</li>\n<li>Map : key-value 쌍으로 이루어진 데이터의 집합. 순서는 유지되지 않음. 키는 중복x 값은 중복o</li>\n</ul>\n<h2 id=\"컬렉션-인터페이스의-메서드\" style=\"position:relative;\"><a href=\"#%EC%BB%AC%EB%A0%89%EC%85%98-%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4%EC%9D%98-%EB%A9%94%EC%84%9C%EB%93%9C\" aria-label=\"컬렉션 인터페이스의 메서드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>컬렉션 인터페이스의 메서드</h2>\n<ol>\n<li>Collection 인터페이스</li>\n</ol>\n<ul>\n<li>추가 : boolean add(Object o), boolean addAll(Collection c)</li>\n<li>void clear()</li>\n<li>검색 : boolean contains(Object o), boolean containsAll(Collection c)</li>\n<li>삭제 : boolean remove(Object o), boolean removeAll(Collection c),\nboolean retainAll(Collection c)</li>\n<li>int size()</li>\n</ul>\n</li>\n</ul>\n<ol start=\"2\">\n<li>List 인터페이스</li>\n</ol>\n<h2 id=\"arraylist-배열기반\" style=\"position:relative;\"><a href=\"#arraylist-%EB%B0%B0%EC%97%B4%EA%B8%B0%EB%B0%98\" aria-label=\"arraylist 배열기반 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ArrayList (배열기반)</h2>\n<ul>\n<li>기존의 Vector를 개선한 것으로 구현원리와 기능적으로 동일</li>\n<li>Vector는 자체적으로 동기화처리가 되나 ArrayList는 안됨</li>\n<li>List인터페이스를 구현하여 순서가 있고, 중복o</li>\n<li>데이터의 저장공간으로 배열을 사용 (배열 기반)</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// ArrayList 생성</span>\n    <span class=\"token class-name\">ArrayList</span> list1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tlist1<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tlist1<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tlist1<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tlist1<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tlist1<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tlist1<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// list1의 일부를 가지고 새로운 리스트 생성</span>\n\t\t<span class=\"token class-name\">ArrayList</span> list2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token punctuation\">(</span>list1<span class=\"token punctuation\">.</span><span class=\"token function\">subList</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>list1<span class=\"token punctuation\">,</span> list2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token class-name\">Collections</span><span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>list1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// list1과 list2를 정렬한다.</span>\n\t\t<span class=\"token class-name\">Collections</span><span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>list2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// Collections.sort(List l)</span>\n\t\t<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>list1<span class=\"token punctuation\">,</span> list2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"list1.containsAll(list2):\"</span> <span class=\"token operator\">+</span> list1<span class=\"token punctuation\">.</span><span class=\"token function\">containsAll</span><span class=\"token punctuation\">(</span>list2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\tlist2<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"B\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tlist2<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"C\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tlist2<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"A\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>list1<span class=\"token punctuation\">,</span> list2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\tlist2<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"AA\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>list1<span class=\"token punctuation\">,</span> list2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token comment\">// list1에서 list2와 겹치는 부분만 남기고 나머지는 삭제한다.</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"list1.retainAll(list2):\"</span> <span class=\"token operator\">+</span> list1<span class=\"token punctuation\">.</span><span class=\"token function\">retainAll</span><span class=\"token punctuation\">(</span>list2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>list1<span class=\"token punctuation\">,</span> list2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token comment\">//  list2에서 list1에 포함된 객체들을 삭제한다.</span>\n\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span> list2<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>list1<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span>list2<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t\t\tlist2<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>list1<span class=\"token punctuation\">,</span> list2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"linkedlist\" style=\"position:relative;\"><a href=\"#linkedlist\" aria-label=\"linkedlist permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>LinkedList</h2>\n<ul>\n<li>\n<p>배열의 장단점: 배열은 구조가 간단, 접근시간이 짧다. 데이터가 연속적</p>\n</li>\n<li>\n<p>한번 생성하면 크기변경 불가 (새로 배열을 만들고 / 기존내용 복사 / 참조변경 해야 함)</p>\n</li>\n<li>\n<p>비순차적(중간에) 데이터의 추가, 삭제 시에 시간이 많이 걸림</p>\n</li>\n<li>\n<p>LinkedList : 배열의 단점을 보완</p>\n</li>\n<li>\n<p>비순차적으로 데이터를 추가삭제 해도 빠르다.</p>\n</li>\n<li>\n<p>배열과 달리 LinkedList는 <code class=\"language-text\">불연속적</code>으로 존재하는 데이터를 연결</p>\n</li>\n<li>\n<p>데이터 삭제: 단 한번의 참조변경으로 가능 (연결이 끊긴 노드는 gc가 처리)</p>\n</li>\n<li>\n<p>데이처 추가: 한번의 node객체 생성과 두번의 참조 변경으로 가능</p>\n</li>\n<li>\n<p>단점 : 데이터 접근성이 나쁨. 데이터 접근 시간은 ArrayList가 빠르다</p>\n</li>\n<li>\n<p>이를 보완한 Doubly LinkedList(이중연결리스트) - 접근성 향상),</p>\n</li>\n<li>\n<p>Doubly Circular Linked List : 이중연결리스트에서 마지막 요소와 첫번째 요소를 연결시킨 것</p>\n</li>\n</ul>\n<p>정리</p>\n<ul>\n<li>순차적으로 추가/삭제하는 경우에는 ArrayList가 LinkedList보다 빠르다</li>\n<li>중간 데이터를 추가/삭제하는 경우에는 LinkedList가 Array보다 빠르다</li>\n</ul>\n<h2 id=\"stack--queue\" style=\"position:relative;\"><a href=\"#stack--queue\" aria-label=\"stack  queue permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Stack &#x26; Queue</h2>\n<ul>\n<li>\n<p>Stack : LIFO(LastInFirstOut) 구조 / 마지막 저장을 제일먼저 out</p>\n</li>\n<li>\n<p>Queue: FIFO(FirstInFirstOut) 구조 / 제일먼저 저장을 제일먼저 out</p>\n</li>\n<li>\n<p>Stack : 순차적으로 데이터 추가 삭제. ArrayList로 구성</p>\n</li>\n<li>\n<p>Queue : 데이터의 추가 삭제가 쉬운 LinkedList로 구현</p>\n</li>\n</ul>\n<p>스택과 큐의 활용</p>\n<ul>\n<li>스택의 활용 예 : 수식계산, 수식괄호검사, 뒤로가기 기능</li>\n<li>큐의 활용 예 : 최근사용문서, 인쇄작업 대기 목록, 버퍼</li>\n</ul>\n<h2 id=\"iterator-listiterator-enumeration-map\" style=\"position:relative;\"><a href=\"#iterator-listiterator-enumeration-map\" aria-label=\"iterator listiterator enumeration map permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Iterator, ListIterator, Enumeration, Map</h2>\n<ul>\n<li>컬렉션에 저장된 데이터를 접근하는데 사용하는 인터페이스</li>\n<li>컬렉션에 저장된 요소를 읽어오는 방법을 표준화해서 접근하기 쉽도록 한다</li>\n<li>Enumeration은 Iteration의 구버전</li>\n<li>ListIterator는 Iterator에서 양방향으로 접근성을 향상시킨 것이다</li>\n<li>컬렉션에 iterator()를 호출하여 iterator를 구현한 인스턴스(일회용)를 얻어서 사용한다.</li>\n<li>Object next() : 다음 요소를 읽어온다. / boolean hasNext() : 다음에 읽어올 요소가 있는지 확인</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">ArrayList</span> list <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tlist<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tlist<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tlist<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"3\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tlist<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"4\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tlist<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"5\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token class-name\">Iterator</span> it <span class=\"token operator\">=</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">iterator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>it<span class=\"token punctuation\">.</span><span class=\"token function\">hasNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token class-name\">Object</span> obj <span class=\"token operator\">=</span> it<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"arrays\" style=\"position:relative;\"><a href=\"#arrays\" aria-label=\"arrays permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Arrays</h2>\n<ul>\n<li>배열을 다루는데 유용한 메서드를 정의해놓은 클래스</li>\n<li>copyOf(), copyOfRange() : 배열의 일부, 전체를 복사해 새로운 배열을 반환</li>\n<li>fill() : 배열의 모든 요소를 지정된 값으로 채운다</li>\n<li>setAll() : 배열을 채우는데 사용할 함수형 인터페이스를 매개변수로 받는다.</li>\n<li>sort(), binarySearch() : 배열을 정렬할 때, 배열에 저장된 요소를 이진탐색으로 검색할 때.</li>\n<li>equals(), toString() : 배열의 모든 요소를 출력할 수 있다. 일차원 배열에만 사용</li>\n<li>deepToString() : 다차원 배열의 출력</li>\n<li>asList(Object… a) : 배열을 List에 담아서 반환한다. 매개변수로 가변인수로 나열했을 때도 가능하다.</li>\n</ul>\n<h2 id=\"comparator-comparable\" style=\"position:relative;\"><a href=\"#comparator-comparable\" aria-label=\"comparator comparable permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Comparator, Comparable</h2>\n<ul>\n<li>컬렉션을 정렬하는데 필요한 메서드 들을 정의하는 인터페이스</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"></code></pre></div>","excerpt":"자바 컬렉션 프레임워크 컬렉션(Collection) : 여러가지 종류의 객체를 모아놓은 것 프레임워크(Framework) : 표준화, 정형화 된 체계적인 프로그래밍 방식 Collection Framework : 다수의 데이터를 효과적으로 처리하기 위해서 표준화된 방법을 제공하는 클래스 들의 집합 JDK 1.2부터 제공 컬렉션 프레임워크의 주요 인터페이스 List / Map / Set List : 순서가 있는 데이터의 집합. 중복허용 Set : 순서를 유지하지 않는 데이터의 집합. 중복허용x Map : key-value 쌍으로 이루어진 데이터의 집합. 순서는 유지되지 않음. 키는 중복x 값은 중복o 컬렉션 인터페이스의 메서드 Collection 인터페이스 추가 : boolean add(Object o), boolean addAll(Collection c) void clear() 검색 : boolean contains(Object o), boolean containsAll(Collec…","frontmatter":{"date":"March 22, 2022","title":"자바 Collection Framework","categories":"java","author":"bontaedev","emoji":"🪤"},"fields":{"slug":"/java/06-academy-collection/"}},"next":{"id":"90dd96a8-603c-5bb9-8c11-9268fa14aeb4","html":"<blockquote>\n<h2 id=\"자바-예외처리ㅋ\" style=\"position:relative;\"><a href=\"#%EC%9E%90%EB%B0%94-%EC%98%88%EC%99%B8%EC%B2%98%EB%A6%AC%E3%85%8B\" aria-label=\"자바 예외처리ㅋ permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>자바 예외처리ㅋ</h2>\n</blockquote>\n<h1 id=\"81-프로그램-에러-종류\" style=\"position:relative;\"><a href=\"#81-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%A8-%EC%97%90%EB%9F%AC-%EC%A2%85%EB%A5%98\" aria-label=\"81 프로그램 에러 종류 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>8.1 프로그램 에러 종류</h1>\n<ul>\n<li>컴파일 에러: 컴파일 중에 발생하는 에러</li>\n<li>런타임 에러: 프로그램 실행 도중에 발생하는 에러</li>\n<li>논리적 에러: 실행은 잘되나 의도한 것과 다르게 작동할 때</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>자바의 런타임 에러</p>\n<ul>\n<li>error : 프로그램 코드에 의해 수습될 수 없는 심각한 오류</li>\n<li>exception : 코드에 의해 수습될 수 있는 미약한 오류</li>\n</ul>\n<p>에러는 발생하면 프로그램의 비정상적 종료를 막을 수 없지만 예외는 예외처리를 통해 종료를 막을 수 잇다.</p>\n<p>에러 ex. OutOfMemoryError, StackOverflowError</p>\n<p>+) 컴파일러가 하는 일</p>\n<ul>\n<li>구문체크, 번역, 최적화, 생략된 코드들을 추가</li>\n</ul>\n<h2 id=\"exception-클래스의-계층구조\" style=\"position:relative;\"><a href=\"#exception-%ED%81%B4%EB%9E%98%EC%8A%A4%EC%9D%98-%EA%B3%84%EC%B8%B5%EA%B5%AC%EC%A1%B0\" aria-label=\"exception 클래스의 계층구조 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Exception 클래스의 계층구조</h2>\n<ul>\n<li>Exception</li>\n<li>IOException, ClassNotFoundException</li>\n<li>RuntimeException\n<ul>\n<li>ArithmeticException</li>\n<li>ClassCastException</li>\n<li>NullPointerException</li>\n<li>IndexOutOfBoundsException</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"exception과-runtimeexception\" style=\"position:relative;\"><a href=\"#exception%EA%B3%BC-runtimeexception\" aria-label=\"exception과 runtimeexception permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Exception과 RuntimeException</h1>\n<ul>\n<li>RuntimeException : 프로그래머의 실수에 의해 발생할 수 있는 예외\nex. IndexOutOfBoundsException, NullPointException, ClassCastException, ArithmeticException</li>\n<li>Exception클래스 : 사용자와 같은 외부의 영향으로 발생할 수 있는 예외\nex. FileNotFoundException, ClassNotFoundException, DataFormatException</li>\n</ul>\n<h1 id=\"예외처리--try-catch\" style=\"position:relative;\"><a href=\"#%EC%98%88%EC%99%B8%EC%B2%98%EB%A6%AC--try-catch\" aria-label=\"예외처리  try catch permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>예외처리 : try-catch</h1>\n<ul>\n<li>예외처리: 프로그램 실행시 발생할 수 있는 예외의 발생한 대비한 코드를 작성하는 것</li>\n<li>비정상적인 종료를 막고 실행상태를 유지하기 위해</li>\n<li>처리하지 못한 예외는 JVM의 예외처리기(UncaughtExceptionHandler)가 받아서 원인을 화면에 출력</li>\n</ul>\n<h2 id=\"예외처리-과정\" style=\"position:relative;\"><a href=\"#%EC%98%88%EC%99%B8%EC%B2%98%EB%A6%AC-%EA%B3%BC%EC%A0%95\" aria-label=\"예외처리 과정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>예외처리 과정</h2>\n<ul>\n<li>첫번째 catch블록부터 차례로 내려가면서 catch블록 내의 괄호에 선언된 참조변수의 종류와 생성된 예외클래스의 인스턴스에 instanceof 연산자를 통해 검사</li>\n<li>검사결과 true인 catch블록을 만날 때까지 검사하고, 찾으면 블럭의 문장을 모두 수행한 후에 try-catch문을 빠져나가고 예외는 처리</li>\n</ul>\n<h1 id=\"finally\" style=\"position:relative;\"><a href=\"#finally\" aria-label=\"finally permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>finally</h1>\n<ul>\n<li>Try-catch문과 함께 예외 발생여부와 상관없이 실행해야 할 코드를 포함시킬 목적으로 만들어짐</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">Ex</span><span class=\"token punctuation\">.</span>\n\n<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">//   예외가 발생할 가능성이 있는 코드</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// 인스턴스 e에 instanceof연산자를 통해 검사</span>\n  <span class=\"token comment\">// 예외처리를 위한 코드</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 예외와 상관없이 실행되는 코드</span>\n  <span class=\"token comment\">// finally문은 try-catch의 마지막 문단에 위치</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h1 id=\"printstacktrace-getmessage\" style=\"position:relative;\"><a href=\"#printstacktrace-getmessage\" aria-label=\"printstacktrace getmessage permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>printStackTrace(), getMessage()</h1>\n<ul>\n<li>예외 발생시 예외 객체가 생성되고 메서드를 통해 확인할 수 있다.</li>\n<li>printStackTrace() : 예외발생 당시의 호출스택 call stack에 있었던 메서드의 정보와 예외 메세지를 화면에 출력</li>\n<li>getMessage() : 발생한 예외 클래스의 인스턴스에 저장된 메세지를 얻을 수 있다.</li>\n</ul>\n<h2 id=\"멀티-catch-블록-jdk17\" style=\"position:relative;\"><a href=\"#%EB%A9%80%ED%8B%B0-catch-%EB%B8%94%EB%A1%9D-jdk17\" aria-label=\"멀티 catch 블록 jdk17 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>멀티 catch 블록 (JDK1.7)</h2>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ExceptionA</span> <span class=\"token operator\">|</span> <span class=\"token class-name\">ExceptionB</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\ne<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"throw-예외-발생시키기\" style=\"position:relative;\"><a href=\"#throw-%EC%98%88%EC%99%B8-%EB%B0%9C%EC%83%9D%EC%8B%9C%ED%82%A4%EA%B8%B0\" aria-label=\"throw 예외 발생시키기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>throw 예외 발생시키기</h2>\n<ul>\n<li>new를 통해서 예외 클래스 객체를 만든다음</li>\n<li>throw를 통해서 예외를 발생시킨다</li>\n</ul>","frontmatter":{"date":"March 22, 2022","title":"자바 예외처리","categories":"java","author":"bontaedev","emoji":"🪤"},"fields":{"slug":"/java/07-java-exception/"}},"prev":{"id":"f613f015-a867-5dc1-914b-a77467732764","html":"<blockquote>\n<h2 id=\"자바의-입출력과-관련된-부분을-학습하고-정리한-포스트입니다\" style=\"position:relative;\"><a href=\"#%EC%9E%90%EB%B0%94%EC%9D%98-%EC%9E%85%EC%B6%9C%EB%A0%A5%EA%B3%BC-%EA%B4%80%EB%A0%A8%EB%90%9C-%EB%B6%80%EB%B6%84%EC%9D%84-%ED%95%99%EC%8A%B5%ED%95%98%EA%B3%A0-%EC%A0%95%EB%A6%AC%ED%95%9C-%ED%8F%AC%EC%8A%A4%ED%8A%B8%EC%9E%85%EB%8B%88%EB%8B%A4\" aria-label=\"자바의 입출력과 관련된 부분을 학습하고 정리한 포스트입니다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>자바의 입출력과 관련된 부분을 학습하고 정리한 포스트입니다.</h2>\n</blockquote>\n<h2 id=\"파일-입출력\" style=\"position:relative;\"><a href=\"#%ED%8C%8C%EC%9D%BC-%EC%9E%85%EC%B6%9C%EB%A0%A5\" aria-label=\"파일 입출력 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>파일 입출력</h2>\n<ul>\n<li>파일을 객체로(인스턴스화) 만들어 사용</li>\n<li>파일 생성자의 인자값 : HDD에서 해당 파일의 경로값, + 파일명 + 확장자</li>\n<li>파일을 다룰 때 주의할 점 : 파일의 확장자까지 이름에 속한다.</li>\n</ul>\n<br>\n<h2 id=\"스트림stream\" style=\"position:relative;\"><a href=\"#%EC%8A%A4%ED%8A%B8%EB%A6%BCstream\" aria-label=\"스트림stream permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>스트림(Stream)</h2>\n<ul>\n<li>스트림 : 입력장치와 출력장치 사이에 데이터가 흐르는 통로</li>\n<li>입력한 데이터는 입력 스트림을 통해 컴퓨터로 전달되고 출력스트림을 통해 출력장치로 전달된다.</li>\n<li>파일은 입력 스트림을 통해 데이터로 프로그램으로 전달된다.</li>\n<li>프로그램은 출력 스트림을 통해 데이터를 내보낸다.</li>\n</ul>\n<p><br><br></p>\n<h2 id=\"try--catch-구문\" style=\"position:relative;\"><a href=\"#try--catch-%EA%B5%AC%EB%AC%B8\" aria-label=\"try  catch 구문 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>try ~ catch 구문</h2>\n<ul>\n<li>try ~ with resource : try문이 끝나면 객체를 자동으로 반납할 수 있게 처리</li>\n<li>try ~ catch ~ finally : finally문은 catch문에서 잡지 못한 나머지 예외를 잡기 위한 공간</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\">\n<span class=\"token comment\">// try ~ resource</span>\n<span class=\"token keyword\">try</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">FileInputStream</span> fis <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileInputStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token comment\">// 예외를 잡고 싶은 부분</span>\n\n\t\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\te<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// try catch finally</span>\n<span class=\"token class-name\">FileInputStream</span> fis <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token comment\">// 파일과 관련된 객체 인스턴스를 만들었을 때는 객체 반납을 마지막에 해줘야 함!</span>\n\t\t\tfis <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileInputStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\te<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// try 문에서 아무리 예외가 발생해도 마지막으로 잡아주는 곳</span>\n\t\t\t<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n\t\t\t\tfis<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\te2<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span></code></pre></div>\n<p><br><br></p>\n<h2 id=\"입출력-관련-메서드\" style=\"position:relative;\"><a href=\"#%EC%9E%85%EC%B6%9C%EB%A0%A5-%EA%B4%80%EB%A0%A8-%EB%A9%94%EC%84%9C%EB%93%9C\" aria-label=\"입출력 관련 메서드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>입출력 관련 메서드</h2>\n<ul>\n<li>File클래스에 정의되어 있는 메서드들</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">File</span> file <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"이 파일이 실제로 존재하는가? \"</span> <span class=\"token operator\">+</span> file<span class=\"token punctuation\">.</span><span class=\"token function\">exists</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"파일인가? \"</span> <span class=\"token operator\">+</span> file<span class=\"token punctuation\">.</span><span class=\"token function\">isFile</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"디렉토리인가? \"</span> <span class=\"token operator\">+</span> file<span class=\"token punctuation\">.</span><span class=\"token function\">isDirectory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"파일의 크기? : \"</span> <span class=\"token operator\">+</span> file<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"파일의 절대 경로 : \"</span> <span class=\"token operator\">+</span> file<span class=\"token punctuation\">.</span><span class=\"token function\">getAbsolutePath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"파일의 이름 : \"</span> <span class=\"token operator\">+</span> file<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<br>\n<ul>\n<li>파일 생성 (createNewFile), 디렉터리 생성(mkdir)</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">File</span> file2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"new.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>file2<span class=\"token punctuation\">.</span><span class=\"token function\">exists</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token comment\">// Checked Exception : 코드가 실제 실행되기도 전에 에러가 발생할 수 있다고 보여지는 에러</span>\n\t\t\t<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n\t\t\t\tfile2<span class=\"token punctuation\">.</span><span class=\"token function\">createNewFile</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\te<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token class-name\">File</span> newFolder <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"newfolder\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>newFolder<span class=\"token punctuation\">.</span><span class=\"token function\">exists</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\tnewFolder<span class=\"token punctuation\">.</span><span class=\"token function\">mkdir</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span></code></pre></div>\n<p><br><br></p>\n<h2 id=\"파일-입출력-스트림\" style=\"position:relative;\"><a href=\"#%ED%8C%8C%EC%9D%BC-%EC%9E%85%EC%B6%9C%EB%A0%A5-%EC%8A%A4%ED%8A%B8%EB%A6%BC\" aria-label=\"파일 입출력 스트림 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>파일 입출력 스트림</h2>\n<h3 id=\"파일-입력-스트림-fileinputstream-filereader\" style=\"position:relative;\"><a href=\"#%ED%8C%8C%EC%9D%BC-%EC%9E%85%EB%A0%A5-%EC%8A%A4%ED%8A%B8%EB%A6%BC-fileinputstream-filereader\" aria-label=\"파일 입력 스트림 fileinputstream filereader permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>파일 입력 스트림 (FileInputStream, FileReader)</h3>\n<p>파일 -> 프로그램</p>\n<ul>\n<li>FileInputStream (byte단위로 읽기)</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">try</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">FileInputStream</span> fis <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileInputStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n\t\t\t<span class=\"token comment\">/*\n\t\t\tSystem.out.println((char)fis.read()); // 파일의 첫글자를 Ascii코드로 읽어옴 (a=97)\n\t\t\t*/</span>\n\n\t\t\t<span class=\"token comment\">// 데이터를 한번에 읽어오기.</span>\n\t\t\t<span class=\"token comment\">// test.txt 로부터 읽어들여온 데이터를 fileContents 배열안에 모두 담아준다.</span>\n\t\t\t<span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> fileContents <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t\tfis<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span>fileContents<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">byte</span> b <span class=\"token operator\">:</span> fileContents<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">)</span>b <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\n\t\t\t<span class=\"token comment\">// 스트링을 이용하는 출력하는 방법</span>\n\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span>fileContents<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\te<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span></code></pre></div>\n<br>\n<ul>\n<li>FileReader (character 단위로 읽기)\n<ul>\n<li>BufferedReader : 데이터를 한 줄 단위로 읽어올 수 있게 한다.</li>\n<li>readLine이 실행될 때마다 한 줄씩 내려감</li>\n</ul>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">try</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">FileReader</span> fr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileReader</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token class-name\">BufferedReader</span> br <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BufferedReader</span><span class=\"token punctuation\">(</span>fr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token comment\">// 한글자 씩 읽기</span>\n<span class=\"token comment\">//\t\t\tSystem.out.println((char)fr.read());</span>\n<span class=\"token comment\">//\t\t\tSystem.out.println((char)fr.read());</span>\n<span class=\"token comment\">//\t\t\tSystem.out.println((char)fr.read());</span>\n<span class=\"token comment\">// 한 줄씩 읽기</span>\n<span class=\"token comment\">//\t\t\tSystem.out.println(br.readLine());</span>\n<span class=\"token comment\">//\t\t\tSystem.out.println(br.readLine());</span>\n\t\t\t<span class=\"token class-name\">String</span> line <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n\n\t\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>line <span class=\"token operator\">=</span> br<span class=\"token punctuation\">.</span><span class=\"token function\">readLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// 라인이 비어있을 때까지 반복</span>\n\t\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>line<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\te<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span></code></pre></div>\n<br>\n<h3 id=\"파일-출력-스트림-fileoutputstream-filewriter\" style=\"position:relative;\"><a href=\"#%ED%8C%8C%EC%9D%BC-%EC%B6%9C%EB%A0%A5-%EC%8A%A4%ED%8A%B8%EB%A6%BC-fileoutputstream-filewriter\" aria-label=\"파일 출력 스트림 fileoutputstream filewriter permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>파일 출력 스트림 (FileOutputStream, FileWriter)</h3>\n<p>프로그램 - 파일</p>\n<ul>\n<li>write은 이미 존재하는 파일에 쓰는 역할이고, 파일생성은 FileOutputStream 객체의 인스턴스가 생성될 때 생성한다.</li>\n<li>이 프로그램은 실행할 때마다 인스턴스를 생성하니까 파일이 덮어씌워진다.</li>\n<li>기존 파일에 이어서 내용을 작성하고 싶다면? FileOutputStream에 true 인자값을 추가</li>\n<li>flush() : 입력된 내용을 마지막에 한번에 밀어줄 때 사용.</li>\n</ul>\n<br>\n<ul>\n<li>FileOutputStream (byte 단위)</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">try</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">FileOutputStream</span> fos <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileOutputStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"output.txt\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> fileContents <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'c'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'d'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t\t\tfos<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>fileContents<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\te<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span></code></pre></div>\n<br>\n<ul>\n<li>FileWriter (character 단위)</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">String</span> sampleStr <span class=\"token operator\">=</span> <span class=\"token string\">\"...\"</span>\n\n\t\t<span class=\"token keyword\">try</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">FileWriter</span> fw <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileWriter</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"newKorean.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token comment\">// String 값을 그대로 넘겨줄 수 있음!</span>\n\t\t\tfw<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>sampleStr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tfw<span class=\"token punctuation\">.</span><span class=\"token function\">flush</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\te<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#%ED%8C%8C%EC%9D%BC-%EC%9E%85%EC%B6%9C%EB%A0%A5\">파일 입출력</a></p>\n</li>\n<li>\n<p><a href=\"#%EC%8A%A4%ED%8A%B8%EB%A6%BCstream\">스트림(Stream)</a></p>\n</li>\n<li>\n<p><a href=\"#try--catch-%EA%B5%AC%EB%AC%B8\">try ~ catch 구문</a></p>\n</li>\n<li>\n<p><a href=\"#%EC%9E%85%EC%B6%9C%EB%A0%A5-%EA%B4%80%EB%A0%A8-%EB%A9%94%EC%84%9C%EB%93%9C\">입출력 관련 메서드</a></p>\n</li>\n<li>\n<p><a href=\"#%ED%8C%8C%EC%9D%BC-%EC%9E%85%EC%B6%9C%EB%A0%A5-%EC%8A%A4%ED%8A%B8%EB%A6%BC\">파일 입출력 스트림</a></p>\n<ul>\n<li><a href=\"#%ED%8C%8C%EC%9D%BC-%EC%9E%85%EB%A0%A5-%EC%8A%A4%ED%8A%B8%EB%A6%BC-fileinputstream-filereader\">파일 입력 스트림 (FileInputStream, FileReader)</a></li>\n<li><a href=\"#%ED%8C%8C%EC%9D%BC-%EC%B6%9C%EB%A0%A5-%EC%8A%A4%ED%8A%B8%EB%A6%BC-fileoutputstream-filewriter\">파일 출력 스트림 (FileOutputStream, FileWriter)</a></li>\n</ul>\n</li>\n</ul>\n</div>","frontmatter":{"date":"March 22, 2022","title":"자바 입출력 정리","categories":"java","author":"bontaedev","emoji":"👀"},"fields":{"slug":"/java/04-academy-fileio01/"}},"site":{"siteMetadata":{"siteUrl":"https://bontaedev.github.io","comments":{"utterances":{"repo":""}}}}},"pageContext":{"slug":"/java/06-academy-collection/","nextSlug":"/java/07-java-exception/","prevSlug":"/java/04-academy-fileio01/"}},
    "staticQueryHashes": ["1073350324","1956554647","2938748437"]}