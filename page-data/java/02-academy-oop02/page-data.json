{
    "componentChunkName": "component---src-templates-blog-template-js",
    "path": "/java/02-academy-oop02/",
    "result": {"data":{"cur":{"id":"2b8a16e4-a145-5f20-9137-8a709eaf142e","html":"<blockquote>\n<h2 id=\"자바-객체지향-프로그래밍과-관련된-부분을-학습하고-정리한-포스트입니다\" style=\"position:relative;\"><a href=\"#%EC%9E%90%EB%B0%94-%EA%B0%9D%EC%B2%B4%EC%A7%80%ED%96%A5-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D%EA%B3%BC-%EA%B4%80%EB%A0%A8%EB%90%9C-%EB%B6%80%EB%B6%84%EC%9D%84-%ED%95%99%EC%8A%B5%ED%95%98%EA%B3%A0-%EC%A0%95%EB%A6%AC%ED%95%9C-%ED%8F%AC%EC%8A%A4%ED%8A%B8%EC%9E%85%EB%8B%88%EB%8B%A4\" aria-label=\"자바 객체지향 프로그래밍과 관련된 부분을 학습하고 정리한 포스트입니다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>자바 객체지향 프로그래밍과 관련된 부분을 학습하고 정리한 포스트입니다.</h2>\n</blockquote>\n<blockquote>\n<h2 id=\"\" style=\"position:relative;\"><a href=\"#\" aria-label=\" permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n</blockquote>\n<h1 id=\"변수의-종류\" style=\"position:relative;\"><a href=\"#%EB%B3%80%EC%88%98%EC%9D%98-%EC%A2%85%EB%A5%98\" aria-label=\"변수의 종류 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>변수의 종류</h1>\n<ul>\n<li>\n<p>지역변수 : 메서드 내에 선언되어 메서드 내에서만 사용가능한 변수</p>\n</li>\n<li>\n<p>인스턴스변수 : 클래스 영역에서 선언되며, 인스턴스를 생성할 때 만들어진다. 인스턴스는 독립된 저장공간을 가지므로 서로 다른 값을 가질 수 있다.</p>\n</li>\n<li>\n<p>클래스 변수 : 인스턴스를 생성하지 않아도 어디서나 사용할 수 있는 변수</p>\n<ul>\n<li>[클래스이름.클래스변수] 와 같이 사용된다. ex. Variable.cv</li>\n<li>클래스가 메모리에 로딩될때 생성되어 프로그램이 종료될 때까지 유지된다.</li>\n<li>제어자를 public 붙이면 어디서나 접근할 수 있는 전역변수global variable의 성격을 가진다.</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"클래스변수와-인스턴스-변수\" style=\"position:relative;\"><a href=\"#%ED%81%B4%EB%9E%98%EC%8A%A4%EB%B3%80%EC%88%98%EC%99%80-%EC%9D%B8%EC%8A%A4%ED%84%B4%EC%8A%A4-%EB%B3%80%EC%88%98\" aria-label=\"클래스변수와 인스턴스 변수 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>클래스변수와 인스턴스 변수</h2>\n<ul>\n<li>클래스변수 : 각 개체가 고유한 값을 가지고 있어야 할때.</li>\n<li>인스턴스변수 : 각 개체가 특별한 값을 가지고 있어야 할때.</li>\n</ul>\n<h1 id=\"생성자\" style=\"position:relative;\"><a href=\"#%EC%83%9D%EC%84%B1%EC%9E%90\" aria-label=\"생성자 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>생성자</h1>\n<ul>\n<li>인스턴스가 생성될 때 호출되는 ‘인스턴스 초기화 메서드’. 인스턴스 초기화 작업에 주로 사용된다.</li>\n<li>생성자의 조건 : 생성자의 이름 = 클래스의 이름</li>\n<li>메서드처럼 클래스내에 선언되며 구조도 비슷하나</li>\n<li>생성자 앞에 void 를 쓰지 않는다.<code class=\"language-text\">리턴값이 없다</code>는 것이 다름.</li>\n</ul>\n<blockquote>\n<p>연산자 new가 인스턴스를 생성하는 것이지 생성자가 인스턴스를 생성하는 것이 아니다.\n생성자는 인스턴스변수들의 초기화에 사용되는 조금 특별한 메서드</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\">클래스이름<span class=\"token punctuation\">(</span>타입변수명<span class=\"token punctuation\">,</span> 타입변수명<span class=\"token punctuation\">,</span> …<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token comment\">// 인스턴스 생성시 수행될 코드</span>\n<span class=\"token comment\">// 주로 인스턴스 변수의 초기화 코드를 찍는다.</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Card</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token class-name\">Card</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>                         <span class=\"token comment\">// 매개변수가 없는 생성자</span>\n\t…\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token class-name\">Card</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> k<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> num<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>        <span class=\"token comment\">// 매개변수가 있는 생성자</span>\n\t<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token class-name\">Card</span> c <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Card</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li>연산자 new에 의해서 메모리(heap)에 Card클래스의 인스턴스가 생성된다.</li>\n<li>생성자 Card()가 호출되어 수행된다.</li>\n<li>연산자 new의 결과로 생성된 Card 인스턴스의 주소가 반환되어 참조변수 c에 저장된다.</li>\n</ul>\n<h2 id=\"기본생성자\" style=\"position:relative;\"><a href=\"#%EA%B8%B0%EB%B3%B8%EC%83%9D%EC%84%B1%EC%9E%90\" aria-label=\"기본생성자 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>기본생성자</h2>\n<ul>\n<li>기본 생성자가 컴파일러에 의해 추가되는 경우는 클래스 내에 <code class=\"language-text\">정의된 생성자가 하나도 없을 때</code> 뿐이다.</li>\n<li>클래스가 public인 경우에는 기본생성자도 public이 추가된다.</li>\n</ul>\n<h2 id=\"매개변수가-있는-생성자\" style=\"position:relative;\"><a href=\"#%EB%A7%A4%EA%B0%9C%EB%B3%80%EC%88%98%EA%B0%80-%EC%9E%88%EB%8A%94-%EC%83%9D%EC%84%B1%EC%9E%90\" aria-label=\"매개변수가 있는 생성자 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>매개변수가 있는 생성자</h2>\n<p>생성자도 메서드처럼 매개변수를 선언해 호출 시 값을 넘겨받아 인스턴스 초기화에 사용할 수 있다.\n인스턴스마다 다른 값으로 초기화해야 할 결우 유용.</p>\n<h2 id=\"객체배열\" style=\"position:relative;\"><a href=\"#%EA%B0%9D%EC%B2%B4%EB%B0%B0%EC%97%B4\" aria-label=\"객체배열 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>객체배열</h2>\n<h2 id=\"nullpointexception\" style=\"position:relative;\"><a href=\"#nullpointexception\" aria-label=\"nullpointexception permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>NullPointException</h2>","excerpt":"자바 객체지향 프로그래밍과 관련된 부분을 학습하고 정리한 포스트입니다.  변수의 종류 지역변수 : 메서드 내에 선언되어 메서드 내에서만 사용가능한 변수 인스턴스변수 : 클래스 영역에서 선언되며, 인스턴스를 생성할 때 만들어진다. 인스턴스는 독립된 저장공간을 가지므로 서로 다른 값을 가질 수 있다. 클래스 변수 : 인스턴스를 생성하지 않아도 어디서나 사용할 수 있는 변수 [클래스이름.클래스변수] 와 같이 사용된다. ex. Variable.cv 클래스가 메모리에 로딩될때 생성되어 프로그램이 종료될 때까지 유지된다. 제어자를 public 붙이면 어디서나 접근할 수 있는 전역변수global variable의 성격을 가진다. 클래스변수와 인스턴스 변수 클래스변수 : 각 개체가 고유한 값을 가지고 있어야 할때. 인스턴스변수 : 각 개체가 특별한 값을 가지고 있어야 할때. 생성자 인스턴스가 생성될 때 호출되는 ‘인스턴스 초기화 메서드’. 인스턴스 초기화 작업에 주로 사용된다. 생성자의 조건 :…","frontmatter":{"date":"March 15, 2022","title":"자바 객체지향 프로그래밍 정리 02 - 메서드, 생성자","categories":"java","author":"bontaedev","emoji":"🪤"},"fields":{"slug":"/java/02-academy-oop02/"}},"next":{"id":"d3adce31-eccd-548d-b659-64ec2eb8c6ba","html":"<blockquote>\n<h2 id=\"자바-객체지향-프로그래밍과-관련된-부분을-학습하고-정리한-포스트입니다\" style=\"position:relative;\"><a href=\"#%EC%9E%90%EB%B0%94-%EA%B0%9D%EC%B2%B4%EC%A7%80%ED%96%A5-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D%EA%B3%BC-%EA%B4%80%EB%A0%A8%EB%90%9C-%EB%B6%80%EB%B6%84%EC%9D%84-%ED%95%99%EC%8A%B5%ED%95%98%EA%B3%A0-%EC%A0%95%EB%A6%AC%ED%95%9C-%ED%8F%AC%EC%8A%A4%ED%8A%B8%EC%9E%85%EB%8B%88%EB%8B%A4\" aria-label=\"자바 객체지향 프로그래밍과 관련된 부분을 학습하고 정리한 포스트입니다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>자바 객체지향 프로그래밍과 관련된 부분을 학습하고 정리한 포스트입니다.</h2>\n</blockquote>\n<h1 id=\"오버라이딩overriding\" style=\"position:relative;\"><a href=\"#%EC%98%A4%EB%B2%84%EB%9D%BC%EC%9D%B4%EB%94%A9overriding\" aria-label=\"오버라이딩overriding permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>오버라이딩(overriding)</h1>\n<ul>\n<li>\n<p>조상 클래스로부터 상속받은 메서드의 내용을 변경하는 것</p>\n</li>\n<li>\n<p>조건 : 이름 / 매개변수 / 반환타입 이 같아야 한다. (선언부)</p>\n</li>\n<li>\n<p>접근제어자와 예외는 제한된 조건에서 변경가능</p>\n<ul>\n<li>조상클래스보다 넓거나 같게는 변경가능 (ex. protected -> public / protected )</li>\n<li>조상클래스보다 많은 예외를 등록할 수 없다.</li>\n<li>인스턴스 메서드를 static 메서드 또는 반대로 변경할 수 없음</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">Class</span> <span class=\"token class-name\">Parent</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">void</span> <span class=\"token function\">parentMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">SQLException</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token class-name\">Class</span> <span class=\"token class-name\">Child</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Parent</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">void</span> <span class=\"token function\">parentMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 자식 클래스에서 더 많은 예외를 던질 수 없다. (x)</span></code></pre></div>\n</li>\n</ul>\n<h2 id=\"오버로딩-vs-오버라이딩\" style=\"position:relative;\"><a href=\"#%EC%98%A4%EB%B2%84%EB%A1%9C%EB%94%A9-vs-%EC%98%A4%EB%B2%84%EB%9D%BC%EC%9D%B4%EB%94%A9\" aria-label=\"오버로딩 vs 오버라이딩 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>오버로딩 vs 오버라이딩</h2>\n<ul>\n<li>overloading : 기존에 없는 새로운 메서드를 정의</li>\n<li>overriding : 상속받은 메서드의 내용을 변경</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Parent</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">void</span> <span class=\"token function\">parentMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Child</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Parent</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">void</span> <span class=\"token function\">parentMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token comment\">// overriding</span>\n  <span class=\"token keyword\">void</span> <span class=\"token function\">parentMethod</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token comment\">// overloading</span>\n\n  <span class=\"token keyword\">void</span> <span class=\"token function\">childMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">void</span> <span class=\"token function\">childMethod</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token comment\">// overloading</span>\n  <span class=\"token keyword\">void</span> <span class=\"token function\">childMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token comment\">// error!</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"super\" style=\"position:relative;\"><a href=\"#super\" aria-label=\"super permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>super</h2>\n<ul>\n<li>자손 클래스에서 조상클래스의 상속받은 멤버를 참조하기 위해 사용하는 변수</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">class</span>\n</code></pre></div>\n<h2 id=\"super---조상클래스의-생성자\" style=\"position:relative;\"><a href=\"#super---%EC%A1%B0%EC%83%81%ED%81%B4%EB%9E%98%EC%8A%A4%EC%9D%98-%EC%83%9D%EC%84%B1%EC%9E%90\" aria-label=\"super   조상클래스의 생성자 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>super() - 조상클래스의 생성자</h2>\n<ul>\n<li>조상클래스의 생성자를 자식클래스에서 호출할 때 사용</li>\n<li>조상클래스의 생성자를 호출하면 자손클래스의 인스턴스에서 조상클래스의 멤버를 사용할 수 있다.\n<ul>\n<li>자손의 멤버 + 조상의 멤버 -> 하나의 인스턴스</li>\n</ul>\n</li>\n<li>Object 클래스를 상속받는 모든 클래스의 생성자의 첫 줄에는 생성자.this() 이나 super()를 호출해야 한다. 안하면 컴파일러가 자동으로 추가한다.</li>\n</ul>\n<h2 id=\"제어자-modifier\" style=\"position:relative;\"><a href=\"#%EC%A0%9C%EC%96%B4%EC%9E%90-modifier\" aria-label=\"제어자 modifier permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>제어자 (modifier)</h2>\n<ul>\n<li>클래스, 변수, 메서드의 선언부에 사용되어 부가적인 의미를 부여</li>\n<li>접근제어자 : public, protected, default, private</li>\n</ul>\n<ol>\n<li>static (공통적인)</li>\n</ol>\n<ul>\n<li>공통적으로 사용되는 영역인 static에 생성될 수 있게 지정해줌</li>\n<li>static 멤버변수 : 클래스변수로 지정됨. 클래스가 메모리에 로드되면 생성된다. 즉 인스턴스 없이 사용가능.</li>\n<li>static 메서드 : 인스턴스 생성없이 호출가능하다. 인스턴스 멤버들을 사용할 수는 없다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">StaticTest</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> width <span class=\"token operator\">=</span> <span class=\"token number\">200</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 클래식 멤버변수</span>\n  <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> height <span class=\"token operator\">=</span> <span class=\"token number\">120</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">static</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// 클래스 초기화 블럭</span>\n    <span class=\"token comment\">// static변수위 복잡한 초기화 진행</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// static 메서드</span>\n    retu\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ol start=\"2\">\n<li>final (마지막의)</li>\n</ol>\n<ul>\n<li>상수를 사용하거나 메서드에 쓰면 오버라이딩을 못하게 하고, 클래스에 사용하면 상속을 제한한다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">final</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">FinalTest</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// 상속 안됨</span>\n  <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> MAX_SIZE <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 상수</span>\n  <span class=\"token keyword\">final</span> <span class=\"token keyword\">void</span> <span class=\"token function\">getMaxSize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> LV <span class=\"token operator\">=</span> MAX_SIZE<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> MAX_SIZE<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 생성자를 이용해 final멤버 변수를 초기화</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Card</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> NUMBER<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\n  <span class=\"token class-name\">Card</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Strign</span> kind<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> num<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// 생성자로 final 변수 초기화</span>\n  KIND <span class=\"token operator\">=</span> kind<span class=\"token punctuation\">;</span>\n  NUMBER <span class=\"token operator\">=</span> num<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\nc<span class=\"token punctuation\">.</span>NUMBER <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 물론 접근해서 새로운 값을 할당할 수는 없다!</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<ol start=\"3\">\n<li>abstract (추상)</li>\n</ol>\n<ul>\n<li>메서드의 선언부만 작성하고 실제 수행내용은 수행하지 않음</li>\n<li>추상클래스, 추상메서드를 작성할 때 사용</li>\n</ul>\n<ol start=\"4\">\n<li>접근제어자</li>\n</ol>","frontmatter":{"date":"March 15, 2022","title":"자바 객체지향 프로그래밍 정리 - 오버로딩","categories":"java","author":"bontaedev","emoji":"🪤"},"fields":{"slug":"/java/03-academy-oop03/"}},"prev":{"id":"933f0407-5a4c-53a6-8786-f79f8c62dd5c","html":"<p>dssss</p>","frontmatter":{"date":"March 16, 2022","title":"TIL_220316","categories":"TIL","author":"bontaedev","emoji":"🪤"},"fields":{"slug":"/TIL/02_TIL_0316/"}},"site":{"siteMetadata":{"siteUrl":"https://bontaedev.github.io","comments":{"utterances":{"repo":""}}}}},"pageContext":{"slug":"/java/02-academy-oop02/","nextSlug":"/java/03-academy-oop03/","prevSlug":"/TIL/02_TIL_0316/"}},
    "staticQueryHashes": ["1073350324","1956554647","2938748437"]}